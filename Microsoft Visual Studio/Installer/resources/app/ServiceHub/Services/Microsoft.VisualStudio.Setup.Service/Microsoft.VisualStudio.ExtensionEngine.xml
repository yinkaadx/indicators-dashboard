<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.ExtensionEngine</name>
    </assembly>
    <members>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute" /> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName" /> method on the <paramref name="builderType" /> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName" /> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1" /> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute" /> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null" /> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute" /> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null" /> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null" /> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute" /> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute" /> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute" /> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
            <remarks>
            This can be used to inform tooling that a constant should be used as an argument for the annotated parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute" /> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue" />, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" />, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute" /> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute" /> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum" /> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid" /> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan" /> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref" /> as implicitly
            <see langword="scoped" /> - where the compiler does not allow the <see langword="ref" /> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this" /> for <see langword="struct" /> instance methods.</item>
                <item><see langword="ref" /> parameters that refer to <see langword="ref" /> <see langword="struct" /> types.</item>
                <item><see langword="out" /> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref" /> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.Enabled">
            <summary>
            The atom is present. CodeMarkers are enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.Disabled">
            <summary>
            The atom is not present, but InitPerformanceDll has not yet been called.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.DisabledDueToDllImportException">
            <summary>
            Disabled because the CodeMarkers transport DLL could not be found or
            an import failed to resolve.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.Performance.CodeMarkers.IsEnabled">
            <summary>
            Are CodeMarkers enabled? Note that even if IsEnabled returns false, CodeMarkers
            may still be enabled later in another component.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarker(System.Int32)">
            <summary>
            Sends a code marker event
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.Byte[])">
            <summary>
            Sends a code marker event with additional user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="aBuff">User data buffer. May not be null.</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
            <exception cref="T:System.ArgumentNullException">aBuff was null</exception>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.SetStateDLLException">
            <summary>
            Used by ManagedPerfTrack.cs to report errors accessing the DLL.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.Guid)">
            <summary>
            Sends a code marker event with additional Guid user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="guidData">The additional Guid to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.String)">
            <summary>
            Sends a code marker event with additional String user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="stringData">The additional String to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.StringToBytesZeroTerminated(System.String)">
            <summary>
            Converts a string into a byte buffer including a zero terminator (needed for proper ETW message formatting)
            </summary>
            <param name="stringData">String to be converted to bytes</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.UInt32)">
            <summary>
            Sends a code marker event with additional DWORD user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="uintData">The additional DWORD to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.UInt64)">
            <summary>
            Sends a code marker event with additional QWORD user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="ulongData">The additional QWORD to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.UsePrivateCodeMarkers(System.String,Microsoft.Win32.RegistryView)">
            <summary>
            Checks the registry to see if code markers are enabled
            </summary>
            <param name="regRoot">The registry root</param>
            <param name="registryView">The registry view.</param>
            <returns>Whether CodeMarkers are enabled in the registry</returns>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerStartEnd">
            <summary>
            Use CodeMarkerStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.  If you are using correlated
            codemarkers and providing your own event manifest, include two GUIDs (the correlation
            "marker" and the correlation ID itself) as the very first fields.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerExStartEnd">
            <summary>
            Use CodeMarkerExStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.  If you are using correlated
            codemarkers and providing your own event manifest, include two GUIDs (the correlation
            "marker" and the correlation ID itself) as the very first fields.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Dotnet.Stubs.CodeMarkerEvent">
            <summary>
            This is a stub based on Microsoft.Internal.Performance.CodeMarkerEvent so that the .NET version can compile.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Dotnet.Stubs.CodeMarkerStartEnd">
            <summary>
            This is a stub based on Microsoft.Internal.Performance.CodeMarkerStartEnd so that the .NET version can compile.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.IAutoUpdateOutputData">
            <summary>
            Interface containing output data of an auto-update process.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IAutoUpdateOutputData.AutoUpdateExtensionsEnabled">
            <summary>
            Gets whether auto-update for extensions is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IAutoUpdateOutputData.AutoUpdateResults">
            <summary>
            Gets results of all auto-updates.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IAutoUpdateOutputData.UpdatedExtensions">
            <summary>
            Gets extensions that have been auto-updated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.IAutoUpdateResult">
            <summary>
            An interface containing result of an individual auto-update.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IAutoUpdateResult.Identifier">
            <summary>
            Gets the identifier of the update. It's the same as the extension's identifier in VSIX manifest.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IAutoUpdateResult.Name">
            <summary>
            Gets the name of the update which will be shown to users in the update hub for this update.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IAutoUpdateResult.Version">
            <summary>
            Gets the version of the update.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IAutoUpdateResult.Source">
            <summary>
            Gets the ExtensionUpdate for which this result belongs.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IAutoUpdateResult.State">
            <summary>
            Gets the progress of the update.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IAutoUpdateResult.Error">
            <summary>
            Gets the error during the update if any.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.AutoUpdateOutputDataImpl">
            <summary>
            Class containing output data of an auto-update process.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.AutoUpdateOutputDataImpl.AutoUpdateExtensionsEnabled">
            <summary>
            Gets whether auto-update for extensions is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.AutoUpdateOutputDataImpl.AutoUpdateResults">
            <summary>
            Gets results of all updates.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.AutoUpdateOutputDataImpl.UpdatedExtensions">
            <summary>
            Gets extensions that have been auto-updated.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.ExtensionManager.BinaryHelper" -->
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BitRotator.RotateLeft(System.SByte,System.Int32)">
            <summary>
            Rotates the bits of a signed byte value to the left
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BitRotator.RotateLeft(System.Byte,System.Int32)">
            <summary>
            Rotates the bits of an unsigned byte value to the left
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BitRotator.RotateRight(System.SByte,System.Int32)">
            <summary>
            Rotates the bits of a signed byte value to the right
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BitRotator.RotateRight(System.Byte,System.Int32)">
            <summary>
            Rotates the bits of an unsigned byte value to the right
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BitRotator.RotateLeft(System.Int16,System.Int32)">
            <summary>
            Rotates the bits of a signed short value to the left
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BitRotator.RotateLeft(System.UInt16,System.Int32)">
            <summary>
            Rotates the bits of an unsigned short value to the left
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BitRotator.RotateRight(System.Int16,System.Int32)">
            <summary>
            Rotates the bits of a signed short value to the right
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BitRotator.RotateRight(System.UInt16,System.Int32)">
            <summary>
            Rotates the bits of an unsigned short value to the right
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BitRotator.RotateLeft(System.Int32,System.Int32)">
            <summary>
            Rotates the bits of a signed int value to the left
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BitRotator.RotateLeft(System.UInt32,System.Int32)">
            <summary>
            Rotates the bits of an unsigned int value to the left
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BitRotator.RotateRight(System.Int32,System.Int32)">
            <summary>
            Rotates the bits of a signed int value to the right
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BitRotator.RotateRight(System.UInt32,System.Int32)">
            <summary>
            Rotates the bits of an unsigned int value to the right
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BitRotator.RotateLeft(System.Int64,System.Int32)">
            <summary>
            Rotates the bits of a signed long value to the left
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BitRotator.RotateLeft(System.UInt64,System.Int32)">
            <summary>
            Rotates the bits of an unsigned long value to the left
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BitRotator.RotateRight(System.Int64,System.Int32)">
            <summary>
            Rotates the bits of a signed long value to the right
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BitRotator.RotateRight(System.UInt64,System.Int32)">
            <summary>
            Rotates the bits of an unsigned long value to the right
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.DataFormats.Text">
            <summary>
            <para>Specifies the standard ANSI text format. This <see langword="static " /> 
            field is read-only.</para>
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.DataFormats.Rtf">
            <summary>
               <para>Specifies text consisting of Rich Text Format (RTF) data. This 
               <see langword="static " /> field is read-only.</para>
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.DataFormats.Xaml">
            <summary>
            Specifies a data format as Xaml. This field is read-only.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.DocIdBuilder">
            <summary>
            Builds a <see href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/documentation-comments#d42-id-string-format">doc comment ID</see>
            for a given type or member reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.DocIdBuilder.#ctor(System.Reflection.Metadata.MetadataReader)">
            <summary>
            Builds a <see href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/documentation-comments#d42-id-string-format">doc comment ID</see>
            for a given type or member reference.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.DocIdBuilder.GetDocumentationCommentId(System.Reflection.Metadata.EntityHandle)">
            <summary>
            Constructs a <see href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/documentation-comments#d42-id-string-format">DocID</see> for the given entity handle.
            </summary>
            <param name="entityHandle">The handle to the entity to construct a DocID for.</param>
            <returns>The DocID.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <paramref name="entityHandle" /> refers to an entity for which no DocID can be constructed.</exception>
            <remarks>
            <para>
            DocIDs can be constructed for the following entity types:
            <list type="bullet">
            <item><see cref="F:System.Reflection.Metadata.HandleKind.TypeDefinition" /></item>
            <item><see cref="F:System.Reflection.Metadata.HandleKind.EventDefinition" /></item>
            <item><see cref="F:System.Reflection.Metadata.HandleKind.FieldDefinition" /></item>
            <item><see cref="F:System.Reflection.Metadata.HandleKind.MethodDefinition" /></item>
            <item><see cref="F:System.Reflection.Metadata.HandleKind.PropertyDefinition" /></item>
            <item><see cref="F:System.Reflection.Metadata.HandleKind.TypeReference" /></item>
            <item><see cref="F:System.Reflection.Metadata.HandleKind.MemberReference" /></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.DocIdBuilder.NamedTypeHandleInfo.Namespace">
            <summary>
            Gets the full namespace of the type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.DocIdBuilder.NamedTypeHandleInfo.Name">
            <summary>
            Gets the type name (without any arity suffix).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.DocIdBuilder.NamedTypeHandleInfo.NestingType">
            <summary>
            Gets the type that nests this one.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineExtensionMethods.GetDependentNodes(Microsoft.VisualStudio.Setup.Dependencies.IDependencyNode)">
            <summary>
            Given an initial node to begin searching from, return a collection of all selectable dependency nodes
            that depend on the initialNode, both Present and Absent
            </summary>
            <param name="initialNode">The initial node to begin checking dependencies for</param>
            <returns>A collection of all selectable dependency nodes that depend on the initialNode, both Present and Absent</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.InstallModule.userStateToLifetime">
            <summary>
            Dictionary used to track the lifetime of multiple asynchronous operations.
            </summary>
            Change to Concurrent dictionary
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallModule.CommitExternalInstall(System.String,System.Boolean)">
            <summary>
            Commits the results of an out-of-proc extension install to the current install state.
            </summary>
            <param name="installDataPath">
            Path to the data file written out by VSIXInstaller.exe containing the results of the
            install operation.
            </param>
            <param name="perMachine">
            True if the install data is for a per-machine extension install, false otherwise.
            </param>
            <returns>True if external install data was committed, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallModule.InstallInternal(Microsoft.VisualStudio.ExtensionManager.InstallableExtensionImpl,Microsoft.VisualStudio.ExtensionManager.InstallFlags,System.Collections.Generic.IDictionary{Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,System.Collections.Generic.Dictionary{System.String,System.Boolean}},System.Collections.Generic.List{Microsoft.VisualStudio.ExtensionManager.IInstalledExtension},Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionList,System.ComponentModel.AsyncOperation,System.IProgress{Microsoft.VisualStudio.ExtensionManager.InstallProgressData},System.Version)">
            <summary>
            The main Install method that performs the bulk of the installation work. This includes
            checking for install dependencies or conflicts, writing the extension files to the
            install directory, and enabling the extension upon success. This method is also
            recursive in nature since it needs to install an extension's nested extensions.
            Asynchronous callers will pass an AsyncOperation object, in addition to two ulong values
            used to report install progress. Synchronous callers will just pass null for the
            AsyncOperation object to denote a synchronous invocation. The ulong install progress
            values are ignored in the synchronous case since we don't need to report install progress.
            </summary>
            <param name="extension">The extension to be installed.</param>
            <param name="installFlags"></param>
            <param name="extensionsInstalledSoFar">
            A list of extensions that have been installed by this method. This list is only used to
            roll back the install in the case of an install failure or cancellation.
            </param>
            <param name="extensionsUninstalledSoFar">
            A list of extensions that have been Uninstalled by this method. This list is only used
            to roll back the install in the case of an install failure or cancellation.
            </param>
            <param name="modifiedInstalledExtensionsList">
            A copy of the list of installed extensions that contains any changes made during one
            install transaction.
            </param>
            <param name="asyncOp">
            The Asynchronous Operation helper used to report progress during installation. If this
            method is called synchronously, this parameter should be null.
            </param>
            <param name="totalBytesToWrite">
            The total size in bytes that will be written during the installation of the parent extension.
            </param>
            <param name="totalBytesWritten">The number of bytes written so far.</param>
            <returns>True if a restart of Visual Studio is required for the extension to be loaded.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallModule.InstallSynchronously(Microsoft.VisualStudio.ExtensionManager.IInstallableExtension,Microsoft.VisualStudio.ExtensionManager.InstallFlags,System.Version)">
            <summary>
            Calls the BeginInstall method with a null AsyncOperation object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallModule.BeginInstall(Microsoft.VisualStudio.ExtensionManager.IInstallableExtension,Microsoft.VisualStudio.ExtensionManager.InstallFlags,System.ComponentModel.AsyncOperation,System.Version)">
            <summary>
            This is the installation entry point for both synchronous and asynchronous installs. It
            will initialize the total install size for the asynchronous case as well as the list of
            extensions installed and uninstalled by this invocation. It then calls the public
            recursive installation method which will perform all installation tasks and install
            nested extensions recursively.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallModule.CheckIfExtensionRequiresAdditionalOperationForInstall(Microsoft.VisualStudio.ExtensionManager.IExtension,Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionList,System.Boolean,System.Boolean,System.Boolean@)">
             <summary>
             This method checks if the extension that we're trying to install should result in an
             additional operation (for example, upgrading or enabling an existing extension).
             Extensions which are not already installed, being installed as an experimental
             extension, or are being replaced require no additional operation.
            
             If the extension is already installed and installed extension is per-machine, we allow
             per-user extension for the same extension. Same applies for reverse. If already
             installed extension in per-user, we allow per-machine extension for the same extension.
             If the extension is already installed and the installed version is different from the
             extension we're checking against, we throw an exception. If the two versions are the
             same, the behavior differs based on whether the new extension is a nested or a parent
             installation. In the case of a parent install, the method throws an exception. In the
             case of a nested install, the method succeeds.
             </summary>
             <returns>
             The method returns true if the extension installation may be skipped or upgraded and
             false if the installation must proceed. Blockers that are found will be thrown as
             Exception types.
             </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallModule.ExtensionRequiresAdditionalOperationForInstall(Microsoft.VisualStudio.ExtensionManager.InstallableExtensionImpl,Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionList,System.Boolean,Microsoft.VisualStudio.ExtensionManager.InstallFlags,System.Boolean@)">
            <summary>
            This method checks if the extension requires an operation in addition to an install (for
            example, an upgrade or an enable operation, or because this is a nested extension).
            Nested extensions are treated slightly differently than parent extensions in the case of
            an already installed extension. Throws an exception if the installation should be stopped.
            </summary>
            <param name="extension">The new extension we're installing.</param>
            <param name="modifiedInstalledExtensionsList">
            A copy of the list of installed extensions that contains any changes made during one
            install transaction.
            </param>
            <param name="isNestedExtension">
            Denotes whether the new extension is a nested extension in another VSIX.
            </param>
            <param name="performExtensionUpdate">
            True if an older version of the same extension is already installed and the extension
            should be updated.
            </param>
            <returns>
            The method returns true if the extension installation may be skipped or upgraded and
            false if the installation should proceed. Blockers that are found will be thrown as
            Exception types.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallModule.FindInstallConflicts(Microsoft.VisualStudio.ExtensionManager.InstallableExtensionImpl,Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionList,System.Collections.Generic.List{Microsoft.VisualStudio.ExtensionManager.IExtension})">
            <summary>
            This method compiles a list of all extensions that will be broken as a result of an
            upgrade performed by an extension.
            </summary>
            <param name="extension">The extension to check for possible upgrade problems.</param>
            <param name="impactedExtensions">
            [in, out] A list of extensions impacted extensions that will be appended to.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallModule.FindRecursiveInstallConflicts(Microsoft.VisualStudio.ExtensionManager.InstallableExtensionImpl,Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionList,System.Collections.Generic.List{Microsoft.VisualStudio.ExtensionManager.IExtension},System.Boolean)">
            <summary>
            This method compiles a list of all extensions that may be broken as a result of an
            upgrade performed by a nested extension. For example, assume extension A-1.0 depends on
            installed extension B-1.1. Also, extension C contains a nested copy of extension B-1.2.
            Upgrading extension B during the installation of C may break extension A.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallModule.InstallCompletionMethod(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,Microsoft.VisualStudio.ExtensionManager.InstallState,System.Boolean,System.Exception,System.Boolean,System.ComponentModel.AsyncOperation)">
            <summary>
            This method is called by the asynchronous install worker when the installation is
            complete. It will fire an UpdateInstallCompletedAsync event.
            </summary>
            <param name="extension">The extension that is in the process of installing.</param>
            <param name="finalState">
            An enumeration that states whether an extension is in an Installed or Uninstalled state.
            An extension may end up in an uninstalled state after installation if an error occurred
            and the installation was rolled back.
            </param>
            <param name="restartRequired">Denotes whether a restart is required to load the extension.</param>
            <param name="exception">
            Contains any error that occurred during installation. This value is null if the install
            was successful.
            </param>
            <param name="canceled">Denotes whether an install was cancelled in the middle of installation.</param>
            <param name="asyncOp">
            The AsyncOperation object used to marshal the install completion event to the caller.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallModule.InstallNestedExtensions(Microsoft.VisualStudio.ExtensionManager.InstallableExtensionImpl,Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,System.IO.Packaging.ZipPackage,Microsoft.VisualStudio.ExtensionManager.InstallFlags,System.Collections.Generic.IDictionary{Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,System.Collections.Generic.Dictionary{System.String,System.Boolean}},System.Collections.Generic.List{Microsoft.VisualStudio.ExtensionManager.IInstalledExtension},Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionList,System.ComponentModel.AsyncOperation,System.IProgress{Microsoft.VisualStudio.ExtensionManager.InstallProgressData},System.Version)">
            <summary>
            Installs a parent extension's nested extensions. Extensions that are already installed
            will be skipped.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallModule.InstallWorker(Microsoft.VisualStudio.ExtensionManager.IInstallableExtension,Microsoft.VisualStudio.ExtensionManager.InstallFlags,System.ComponentModel.AsyncOperation)">
            <summary>
            Thread entry point for asynchronous install operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallModule.PerformSetupEngineInstall(Microsoft.VisualStudio.ExtensionManager.InstallableExtensionImpl,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,System.Collections.Generic.Dictionary{System.String,System.Boolean}},System.Collections.Generic.List{Microsoft.VisualStudio.ExtensionManager.IInstalledExtension},Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionList,System.IProgress{Microsoft.VisualStudio.ExtensionManager.InstallProgressData},Microsoft.VisualStudio.ExtensionManager.InstallFlags,System.ComponentModel.AsyncOperation,System.Version,Microsoft.VisualStudio.ExtensionManager.IInstalledExtension@)">
            <summary>
            Calls into the Setup Engine and uses its dependency graph to modify the VS installation directory
            with the required installs, uninstalls, and downgrades for the extension we are attempting to install.
            </summary>
            <param name="extensionToInstall">Extension we are processing for installation.</param>
            <param name="installPerMachine">Flag denoting if this extension is per-machine.</param>
            <param name="isPackComponent">Flag denoting if this extension is a pack component.</param>
            <param name="extensionsInstalledSoFar">List of all the extensions that have been installed during the current session.</param>
            <param name="extensionsUninstalledSoFar">List of all the extensions that have been uninstalled during the current session.</param>
            <param name="modifiedInstalledExtensionsList">List that contains all the previous modifications that have been made during the current session.</param>
            <param name="progress">Progress bar used to provide the progress of the action.</param>
            <param name="installFlags">Flags used to denote special cases for this extension.</param>
            <param name="asyncOp"></param>
            <param name="targetedVsVersion"></param>
            <param name="newExtension"><seealso cref="T:Microsoft.VisualStudio.ExtensionManager.IInstalledExtension" /> which gets generated using <paramref name="extensionToInstall" /></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:Microsoft.VisualStudio.ExtensionManager.RequiresAdminRightsException"></exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallModule.RollBackInstallation(System.Collections.Generic.IDictionary{Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,System.Collections.Generic.Dictionary{System.String,System.Boolean}},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ExtensionManager.IInstalledExtension},System.Version,Microsoft.VisualStudio.ExtensionManager.InstallFlags)">
            <summary>
            Uninstalls all extensions that have been installed by the install method thus far.
            </summary>
            <param name="installedExtensions">
            List of extensions that have been installed by one invocation of the install method.
            </param>
            <param name="uninstalledExtensions">
            List of extensions that have been uninstalled by one invocation of the install method.
            </param>
            <param name="targetVsVersion">The version of Visual Studio that the install is targeting</param>
            <param name="installFlags">The flags to use for this install.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallModule.SetGetInstallPathOverride(System.Func{Microsoft.VisualStudio.ExtensionManager.IInstallableExtension,System.Boolean,System.String})">
            <summary>
            Test hook method that should only ever be called from the Extension Manager unit tests.
            This method allows the calling code to override the behavior of GetInstallPath for the
            duration of the ExtensionManagerService object's lifetime.
            </summary>
            <param name="getInstallPathOverride"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallModule.GetTargetedVersionFromUserState(System.Object)">
            <summary>
            Gets the targeted major version of VS through reflection
            </summary>
            <param name="state">The user supplied state object from an async operation</param>
            <returns>
            The SupportedSKU version of the passed in state or the current version of VS by default
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallModule.GetExtensionInstallationSize(Microsoft.VisualStudio.ExtensionManager.InstallableExtensionImpl,Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionList)">
            <summary>
            Calculates the number of bytes that will be written during the installation of a new
            extension. If an extension has a nested VSIX, the nested VSIX's uncompressed size will
            be added to the total sum if the nested VSIX is not already installed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallModule.GetInstallableNestedExtensions(Microsoft.VisualStudio.ExtensionManager.InstallableExtensionImpl,Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionList)">
            <summary>
            Returns a collection of references which are a subset of the extension's references that
            correspond to nested VSIX's that may be installed, provided there are no installation
            conflicts. The general rule is that nested extensions will skip installation if an equal
            version is already installed and will upgrade older versions, but fail to install over
            newer versions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallModule.GetInstallPath(System.Boolean,Microsoft.VisualStudio.ExtensionManager.IInstallableExtension)">
            <summary>
            Gets a random, available path where an extension can be installed to.
            </summary>
            <param name="perMachine">True to get a per-machine location. False for a per-user location.</param>
            <param name="extension"></param>
            <returns>An path that an extension can install to.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallModule.PreviewInstalledExtensions(Microsoft.VisualStudio.ExtensionManager.InstallableExtensionImpl,System.Boolean,System.Collections.Generic.List{Microsoft.VisualStudio.ExtensionManager.IInstalledExtension},Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionList)">
            <summary>
            Populates a list with the extensions that would be installed as a result of installing
            the given extension.
            NOTE: The list of extensions may contain duplicates
            </summary>
            <param name="extension">the root extension</param>
            <param name="previewedInstalledExtensions">the list of extensions to populate</param>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ScanModule.ExtensionManifestExcludedDirectories">
            <summary>
            List of directories to exclude from extension manifest scanning
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ScanModule.LoadAndEnableExtensionsAsync(Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ScanResult)">
            <summary>
            Attempts to load scanned extensions and enable Per-Machine extensions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ScanModule.ScanInstalledExtensionsAsync(System.Boolean,System.Boolean,Microsoft.VisualStudio.ExtensionManager.ITelemetryLogger,System.Object)">
            <summary>
            Scans either per user and per machine extensions, or sdk extensions.
            </summary>
            <returns><see cref="T:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ScanResult" /> with a list of found extensions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ScanModule.FindExtensionManifestsAsync(System.IO.DirectoryInfo,System.Int32)">
            <summary>
            Finds the extension manifests in a given root directory. We identify extension manifests by the suffix `extension.vsixmanifest`.
            </summary>
            <param name="rootDirectory">Root directory to start search operation.</param>
            <param name="depthOverride">Overrides the default search depth of 5.</param>
            <returns>Enumerable of the extension manifest full filepaths.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ScanModule.TryLoadExtension(Microsoft.VisualStudio.ExtensionManager.ExtensionLocations,System.String,System.String,Microsoft.VisualStudio.ExtensionManager.InstalledExtensionImpl@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Attempts to load the extension by converting it into an InstalledExtensionImpl and
            checking the package type.
            </summary>
            <returns>
            True if loading succeeded or maximum attempts hasn't been reached, false if we shouldn't
            load the extension.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.StateManagerModule.DisableChildComponents(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ExtensionManager.IInstalledExtension},Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionSettingsList)">
            <summary>
            Disables any extensions installed as a nested VSIX that are only referenced by the given
            extension and other disabled extensions.
            </summary>
            <param name="parentExtension">the disabled extension referencing the pack components</param>
            <param name="extensionsToEnable">Extensions that are pending being enabled.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.StateManagerModule.InitializeEnabledUserExtensions(System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionSettingsList)">
            <summary>
            Sets enabled extensions based on list of enabled extensions from PkgDefManagement. The
            entry in the registry may have changed since PkgDefManagement was loaded, so we get a
            snapshot here.
            </summary>
            <param name="enabledExtensions">the list of enabled extensions from PkgDefManagement</param>
            <param name="pathToExtensionDictionary">
            maps path of extension to extension object of all installed extensions
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.StateManagerModule.UpdateLastConfigurationChange(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,System.Nullable{System.DateTime})">
            <summary>
            Writes the current UTC timestamp (as a FILETIME structure) to either the
            ConfigurationChanged value in the UserSettings key or to the
            Extensions.ConfigurationChanged file in the per-machine extensions directory if this
            extension contains a pkgdef file or is installed per machine.
            </summary>
            <param name="extension">
            The extension which changed requiring a configuration timestamp change.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.StateManagerModule.EnableChildComponents(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionSettingsList)">
            <summary>
            Enables any pack components installed as a nested VSIX of the given extension
            </summary>
            <param name="parentExtension">the extension referencing the pack components</param>
            <param name="reason">aggregate restart reason of child extensions</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.UninstallModule.PendingDeletionsList">
            <summary>
            This is an in-memory list of extensions that are marked for pending deletion.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.UninstallModule.MustBeUninstalledThroughInstaller(Microsoft.VisualStudio.Setup.Dependencies.IDependencyNode)">
            <summary>
            Determines whether or not an extension needs to be uninstalled through Willow or not by
            checking if VS itself depend on any packages that depend on it
            </summary>
            <param name="initialNode">The initial node to begin checking dependencies for</param>
            <returns>True if any dependent node is depenfs on VS itself. false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.UninstallModule.CommitExternalUninstall(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Commits the results of an out-of-proc extension uninstall to the current state.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.UninstallModule.PerformSetupEngineUnInstall(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,Microsoft.VisualStudio.ExtensionManager.InstallFlags,System.String@,System.Boolean)">
            <summary>
            Uses the setup engine to acquire the dependency graph for VS, then performs the installation into the VS directory without commiting the changes
            into the extension manager cache. 
            </summary>
            <param name="extension">Extension to uninstall</param>
            <param name="installFlags">Extension flags</param>
            <param name="downgradePackageInstallPath">The extension install path we are downgrading to if applicable.</param>
            <param name="downgrade">Flag denoting if we are performing a downgrade to a component extension.</param>
            <exception cref="T:Microsoft.VisualStudio.ExtensionManager.RequiresAdminRightsException">Extension is per-machine and the launched instance does not have administrator rights.</exception>
            <exception cref="T:System.InvalidOperationException">No applicable products to uninstall from.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.UninstallModule.Uninstall(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,Microsoft.VisualStudio.ExtensionManager.InstallFlags,System.Version,System.Boolean)">
            <summary>
            Uninstalls an extension from the ExtensionsRoot directory. A restart of Visual Studio is
            required for the uninstall to complete.
            </summary>
            <param name="extension">The extension to be uninstalled.</param>
            <param name="installFlags">The flags to use for this install.</param>
            <param name="targetedVSVersion">The version of VS that the uninstall is targeting</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.UninstallModule.UninstallInternal(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,System.Boolean,System.Version,Microsoft.VisualStudio.ExtensionManager.InstallFlags,System.Boolean)">
            <summary>
            This method allows the Extension Manager service to actually delete pack components as
            in the update case.
            </summary>
            <param name="extension">the extension to be uninstalled</param>
            <param name="forceDelete">
            Denotes whether an extension that is referenced is deleted when it is uninstalled or
            marked as a pack component.
            </param>
            <param name="targetedVSVersion">The version of VS that this uninstall is targeting</param>
            <param name="downgrade">If the uninstall should actually be a downgrade</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.UninstallModule.UninstallOrphanedComponents(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,Microsoft.VisualStudio.ExtensionManager.InstallFlags,System.Boolean)">
            <summary>
            Uninstalls any pack components (extensions installed as a nested VSIX) that are no
            longer referenced as a result of uninstalling this extension.
            </summary>
            <param name="parentExtension">the uninstalled extension referencing the pack components</param>
            <param name="installFlags">The flags to use for this install.</param>
            <param name="forceDelete">Using during the final uninstall step to attempt to delete files off disk.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.UninstallModule.MustBeUninstalledThroughInstaller(System.String,Microsoft.VisualStudio.Setup.Dependencies.IDependencyGraph)">
            <summary>
            Determines whether or not there are components installed that depend on the extension
            with the corresponding id This method is only called from the vsix installer and needs
            to have an updated dependency graph instad of the cached one
            </summary>
            <param name="vsixId">The vsix id of the extension in question</param>
            <returns>
            True if the extension has no components installed that depend on in it, false otherwise
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.UninstallModule.RegisterStartUpForCleanUp(Microsoft.VisualStudio.ExtensionManager.SettingsStorage.IWritableSettingsStore)">
            <summary>
            Sets a registry value to help decide whether to scan the directories at startup.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.UninstallModule.ScheduleDeletionWorkerAsync(System.Collections.Generic.List{Microsoft.VisualStudio.ExtensionManager.UninstallModule.DeletionWorkerEventHandler})">
            <summary>
            This method runs the given deletion handlers on a b/g thread.
            </summary>
            <param name="deletionWorkerList"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.UninstallModule.ThrowIfCannotUninstallOrphanedComponents(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Verify that any pack components that would be orphaned by uninstalling the given
            extension can be uninstalled. Currently the only verification being done is to check if
            the current process is not elevated and the orphaned component is installed per machine.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineSettings.ReadRepositoryValue``1(System.String,System.Boolean,System.Func{System.String,System.Boolean},System.Func{System.String,``0},System.Action{``0})">
            <summary>
            Helper method for reading a value from the settings store.
            </summary>
            <typeparam name="T">The data type of the value to read.</typeparam>
            <param name="valueName">The name of the value.</param>
            <param name="required">True if the property is required. False otherwise.</param>
            <param name="propertyExists">A Func to call to determine if a property exists.</param>
            <param name="getter">A Func to get the property from the settings store.</param>
            <param name="setter">A Func to set the property on the repository config object.</param>
            <returns>True if the property was set or was not required. False otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineSettings.ReadRepositoriesFromStore(Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore,System.Collections.Generic.List{Microsoft.VisualStudio.ExtensionManager.IExtensionRepositoryConfig},Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsScope)">
            <summary>
            Reads the repositories from a SettingsStore instance.
            </summary>
            <param name="store">A read-only SettingsStore instance to read the repository list from.</param>
            <param name="repositories">A List instance to add the ExtensionRepositoryConfig instances to.</param>
            <param name="settingsScope">Scope (user/config) for the SettingsStore we're using.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineUtilities.BuildShowFilesInUseMessage(System.Collections.Generic.IEnumerable{System.Diagnostics.Process})">
            <summary>
            Helper method that builds the message that will be displayed when we try to update / uninstall
            an Extension SDK and find that some of its contained files are in use.
            </summary>
            <param name="processes">Enumeration of processes that are using the extension files.</param>
            <returns>Appropriate message to display. If only VS processes are using the files, we will tell the
            user to close their currently open solution. If external processes are using the files, we will add
            the list of processes that are using them.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineUtilities.GetProcessName(System.Diagnostics.Process)">
            <summary>
            Get Process name. Will try to get the name of the main module in the process. If we
            don't have access to it, will return Process.ProcessName.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineUtilities.CopyStream(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            Copies files stream
            Adapted from http://referencesource.microsoft.com/#mscorlib/system/io/stream.cs,2a0f078c2e0c0aa8
            </summary>
            <param name="input">input stream</param>
            <param name="output">output stream</param>
            <param name="copyFromBeginning">Value indicating if the stream should be copied from the beginning.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineUtilities.IsSelectable(Microsoft.VisualStudio.Setup.IPackage)">
            <summary>
            Gets whether the <see cref="T:Microsoft.VisualStudio.Setup.IPackage" /> is one designed to be selectable by a client application.
            </summary>
            <param name="package">The <see cref="T:Microsoft.VisualStudio.Setup.IPackage" /> to check.</param>
            <returns>Whether the <see cref="T:Microsoft.VisualStudio.Setup.IPackage" /> is one designed to be selectable by a client application.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="package" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineUtilities.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Replaces all occurrences of one string with another using the specified <see cref="T:System.StringComparison" />.
            </summary>
            <param name="value">The source string.</param>
            <param name="replace">The string to replace.</param>
            <param name="replacement">The replacement string.</param>
            <param name="comparison">The <see cref="T:System.StringComparison" /> to use to match <paramref name="replace" />.</param>
            <returns>A string with all occurrences of one string with another using the specified <see cref="T:System.StringComparison" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineUtilities.ToHexString(System.Byte[],System.Int32)">
            <summary>
            [Copied from {Setup-Engine}\src\Setup.Common\Extensions.cs]
            Converts a <see cref="T:System.Byte" /> array to a hexadecimal string without the leading "0x".
            </summary>
            <param name="buffer">The <see cref="T:System.Byte" /> array to convert.</param>
            <param name="maxBytes">The maximum number of bytes for the returned string.</param>
            <returns>A hexadecimal representation of the <paramref name="buffer" />, or an empty string if the buffer length is 0.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineUtilities.ThrowExceptionIfProxyCredentialsRequired(System.Exception,System.String)">
             <summary>
             Helper method to check if an exception is due to missing proxy credentials.
            
             If this exception is due to missing proxy credentials, it will throw a ProxyCredentialsRequiredException. Otherwise, it's a no-op.
             </summary>
             <param name="ex">Exception to check for proxy authentication errors.</param>
             <param name="uri">Uri which requires proxy credentials.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineUtilities.ProxyAuthenticationRequired(System.Exception)">
            <summary>
            Helper function to determine if an exception occurred in response to authentication
            request from the proxy.
            </summary>
            <param name="ex">The exception.</param>
            <returns>true if proxy authentication is needed, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineUtilities.IsMarketPlaceServerAvailable(System.Exception)">
            <summary>
            Helper function to determine if an exception occurred in response to Marketplace
            server unavailability.
            </summary>
            <param name="ex">The exception.</param>
            <returns>true if server is available, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineUtilities.ContainsPath(System.String,System.String)">
            <summary>
            Determines whether the given <paramref name="path" /> contains the given <paramref name="fullPath" />.
            </summary>
            <remarks>
            This will canonicalize the paths (to resolve '\..\' inside the paths) before comparison.
            </remarks>
            <param name="fullPath">The full directory or file path.</param>
            <param name="path">The root path under which to check the <paramref name="fullPath" />.</param>
            <returns>
            Whether the given <paramref name="path" /> contains the given <paramref name="fullPath" />,
            or false if either path is null or an empty string.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineUtilities.NormalizePath(System.String,System.Boolean)">
            <summary>
            Fixes up directory separators for the current platform and optionally terminates with a backslash.
            </summary>
            <param name="path">The path to normalize.</param>
            <param name="addBackslash">Whether to add a backslash to the end of a path if there isn't one already.</param>
            <returns>The normalized path.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.TempDir">
            <summary>
            Class for creating a temporary directory. Class' dispose method ensure the directory is deleted when no longer needed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExperimentPackageInstaller.IsCatalogSigned(System.IO.Packaging.ZipPackage)">
            <summary>
            Checks if something that looks like a signature exists in the catalog file.
            </summary>
            <param name="packageContainer">The package which contains the catalog manifest.</param>
            <returns>True if the catalog manifest contains a signature, otherwise false.</returns>
            <remarks>The signature is not verified; only detected.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionApiUsageScanner.GetUnknownExtensionsListAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the IDs of the extensions that should be scanned.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.VersionCutOffForSetupEngineInstaller">
            <summary>
            The lowest version of VS that will use the setup engine to install vsix v3s
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.#ctor(Microsoft.VisualStudio.ExtensionManager.IEngineHost,Microsoft.VisualStudio.ExtensionManager.EngineMode)">
            <summary>
            DO NOT UNDER ANY CIRCUMSTANCE
            MODIFY THIS SIGNATURE
            WITHOUT PROPER PLANNING
            IT WILL REQUIRE SERVICING.
            If you ignore this warning, we will be unable to install/uninstall extensions at all.
            Only for the version less than 17.10.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.#ctor(Microsoft.VisualStudio.ExtensionManager.IEngineHost,Microsoft.VisualStudio.ExtensionManager.ExtensionEngineOptions)">
            <summary>
            DO NOT UNDER ANY CIRCUMSTANCE
            MODIFY THIS SIGNATURE
            WITHOUT PROPER PLANNING
            IT WILL REQUIRE SERVICING.
            If you ignore this warning, we will be unable to install/uninstall extensions at all.
            Only for the version greater than 17.10+
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.UpdateLastExtensionsChangedTimestamp(System.Boolean,System.Nullable{System.DateTime})">
            <summary>
            Updates the extensions changed timestamp to be the current time.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.UpdateLastExtensionsChangedTimestampCore(System.Boolean,System.Boolean,System.Nullable{System.DateTime})">
            <summary>
            Updates the extensions changed timestamp to be the current time.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.UpdateLastExtensionsChange(System.Boolean)">
            <summary>
            Updates the extensions changed timestamp to be lastConfigChange
            </summary>
            <summary>
            Updates the extensions changed timestamp to be lastConfigChange
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.CommitExternalInstall(System.String,System.Boolean)">
            <summary>
            Commits the results of an out-of-proc extension install to the current install state.
            </summary>
            <param name="installDataPath">Path to the data file written out by VSIXInstaller.exe containing the results of the install operation.</param>
            <param name="perMachine">True if the install data is for a per-machine extension install, false otherwise.</param>
            <returns>True if external install data was committed, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.CommitExternalUninstall(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Commits the results of an out-of-proc extension uninstall to the current state.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.Enable(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.Disable(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.PermanentDisable(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.Install(Microsoft.VisualStudio.ExtensionManager.IInstallableExtension,Microsoft.VisualStudio.ExtensionManager.InstallFlags,System.Version)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.InstallAsync(Microsoft.VisualStudio.ExtensionManager.IInstallableExtension,Microsoft.VisualStudio.ExtensionManager.InstallFlags,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.Downgrade(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,Microsoft.VisualStudio.ExtensionManager.InstallFlags)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.Uninstall(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,Microsoft.VisualStudio.ExtensionManager.InstallFlags,System.Version)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.RevertUninstall(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.GetLastExtensionsChangedTimestamp">
            <summary>
            Blocks until loading complete during updateconfig.
            Do not call within ExtensionEngineImpl.
            </summary>
            <returns>last update timestamp.</returns>
        </member>
        <member name="E:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.InstallCompleted">
            <summary>
            Event fired when an InstallAsync completes, is cancelled, or has an error.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.InstallProgressChanged">
            <summary>
            Event fired as progress is made after starting an Install with InstallAsync.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.SetGetInstallPathOverride(System.Func{Microsoft.VisualStudio.ExtensionManager.IInstallableExtension,System.Boolean,System.String})">
            <summary>
            Test hook method that should only ever be called from the Extension Manager
            unit tests. This method allows the calling code to override the behavior of
            GetInstallPath for the duration of the ExtensionManagerService object's lifetime.
            </summary>
            <param name="getInstallPathOverride"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.CreateList">
            <summary>
            Creates the <see cref="T:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList" /> used to access the extension settings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.ForceExtensionScanAsyncForVsixBuildAsync(System.Threading.CancellationToken)">
            <summary>
            Used during Vsix deployment to force a rescan of the installed extensions and enable any missing ones.
            This is done because the setup work done in the ctor happens before an extensions bits can be put down, causing setup to miss the extension and leave it out of the enabled cache.
            See PR for more details: https://devdiv.visualstudio.com/DevDiv/_git/VSExtensibility/pullrequest/566105
            </summary>
            <param name="disposalToken">A cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.ShouldScanSdkExtensions(System.Boolean)">
            <summary>
            Determines whether SDK extensions should be scanned.
            </summary>
            <param name="canBypassScan">Indicates whether the scanning process can be bypassed. This could depend on conditions such as a recent successful scan.</param>
            <returns>
            Returns <c>true</c> if the extensions should always be scanned, if SDK directory scanning is enabled, if the scan cannot be bypassed, or if the safe scan is enabled and SDK directories are not explicitly excluded from scanning.
            Otherwise, returns <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.ShouldScanUserAndMachineExtensions(System.Boolean)">
            <summary>
            Determines whether the user and machine extensions should be scanned.
            </summary>
            <param name="canBypassScan">Indicates whether the scan can be bypassed. This could be based on certain conditions like a recent successful scan.</param>
            <returns>
            Returns <c>true</c> 'if the extensions should always be scanned', or 'if the scan cannot be bypassed', or 'if the safe scan is enabled and the engine is not in default mode'.
            Otherwise, returns <c>false</c>.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.AbsentPackages">
            <summary>
            Gets the list of product packages that are absent from the installation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.PresentPackages">
            <summary>
            Gets the list of product packages that are present in the installation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.GetVsixPackageDependancyNodes">
            <summary>
            Returns all Vsix Packages that exist in the dependency graph and have vsix ids
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.MustBeUninstalledThroughInstaller(Microsoft.VisualStudio.Setup.Dependencies.IDependencyNode)">
            <summary>
            Determines whether or not an extension needs to be uninstalled through Willow or not by checking if VS itself depend on any packages that depend on it
            </summary>
            <param name="initialNode">The initial node to begin checking dependencies for</param>
            <returns>True if any dependent node is depends on VS itself. false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl.BatchEngineInstall(System.Collections.Generic.List{Microsoft.VisualStudio.ExtensionManager.IInstallableExtension},Microsoft.VisualStudio.ExtensionManager.InstallFlags,System.Version)">
             <summary>
            
             </summary>
             <param name="installableExtensions"></param>
             <param name="installFlags"></param>
             <param name="targetVsVersion"></param>
             <returns></returns>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineInstaller.userStateToLifetime">
            <summary>
            Dictionary used to track the lifetime of multiple asynchronous operations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineInstaller.pendingDeletionsList">
            <summary>
            This is an in-memory list of extensions that are marked for pending deletion.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineInstaller.#ctor(Microsoft.VisualStudio.ExtensionManager.IEngineHost,System.Collections.Specialized.HybridDictionary,Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsStoreList)">
            <summary>
            Constructor
            </summary>
            <param name="engineHost"></param>
            <param name="userStateToLifetime"></param>
            <param name="pendingDeletionsList"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineInstaller.WriteFilesToInstallDirectory(Microsoft.VisualStudio.ExtensionManager.InstallableExtensionImpl,System.String,System.IO.Packaging.ZipPackage,System.Collections.Generic.IDictionary{Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,System.Collections.Generic.Dictionary{System.String,System.Boolean}},System.ComponentModel.AsyncOperation,System.IProgress{Microsoft.VisualStudio.ExtensionManager.InstallProgressData})">
            <summary>
            This method writes all of the files contained in a VSIX package to an extension's install path. Install progress is reported
            for asynchronous invocations.
            </summary>
            <param name="extension"></param>
            <param name="installPath"></param>
            <param name="vsixPackage"></param>
            <param name="extensionsInstalledSoFar"></param>
            <param name="asyncOp"></param>
            <param name="progress"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineInstaller.WriteSigningInformation(Microsoft.VisualStudio.ExtensionManager.InstallableExtensionImpl,System.String,Microsoft.VisualStudio.ExtensionManager.IEngineHost)">
            <summary>
            Write Signing Information for both all users and per user extension except SDKs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineInstaller.IsVSIXSignedExtension(Microsoft.VisualStudio.ExtensionManager.InstallableExtensionImpl)">
            <summary>
            Checks if an extension is signed or not.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorAlreadyInstalled">
            <summary>
              Looks up a localized string similar to {0} is already installed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorBadAllUserExtension">
            <summary>
              Looks up a localized string similar to The extension is invalid because it contains nested extensions with different administrative rights requirements..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorBlockedOnProcesses">
            <summary>
              Looks up a localized string similar to VSIXAutoUpdateError001: VSIXAutoUpdate failed due to the blocking processes..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorBreaksExistingExtensions">
            <summary>
              Looks up a localized string similar to This extension cannot be installed because the following extensions contain dependencies that would be broken as a result of this installation:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorCannotDisablePackComponent">
             <summary>
               Looks up a localized string similar to An error occurred when disabling nested extension '{0}'.
            {1}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorCannotEnableDependency">
             <summary>
               Looks up a localized string similar to This extension cannot be enabled because an error occurred when enabling referenced extension '{0}'.
            {1}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorCertCheckFailed">
            <summary>
              Looks up a localized string similar to CertError001: Certificate check failed. The certificate information of the upgrade does not match with the certificate information of the  extension that is already installed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorCertFileNotFound">
            <summary>
              Looks up a localized string similar to CertError002: Certificate check failed.The certificate information file of the previously installed extension could not be found..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorCertificateFieldsNotFound">
            <summary>
              Looks up a localized string similar to CertError003: Certificate check failed. The certificate information of the previously installed extension could not be read..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorCertificateFieldsNotFoundInUpdate">
            <summary>
              Looks up a localized string similar to CertError005: Certificate check failed. The certificate information of the update could not be read..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorCertPackagePathNotFound">
            <summary>
              Looks up a localized string similar to CertError006: Certificate check failed. The package path of the extension update could not be found..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorDirectoryInUse">
            <summary>
              Looks up a localized string similar to The directory where the extension is installed appears to be in use. Please close any program that may be using it..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorDisallowedPackageTypesInCatalog">
            <summary>
              Looks up a localized string similar to The VSIX's catalog file may only contain packages of type 'vsix' or 'component'..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorExtensionAndPlatformSigned">
            <summary>
              Looks up a localized string similar to Extension SDK and Platform SDK does not contain signed information..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorFilesInUse">
            <summary>
              Looks up a localized string similar to There are files locked in the extension you are trying to update / uninstall. Please close any {0}solutions that may be referencing it..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorFilesInUseAdditional">
             <summary>
               Looks up a localized string similar to 
            The following programs also appear to be locking files that need updating. Please shut them down to enable the update / uninstall.
            
            {0}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInconsistentManifestValues">
            <summary>
              Looks up a localized string similar to The value of property '{0}' is not consistent amongst all manifests..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInstallByMSI">
            <summary>
              Looks up a localized string similar to The InstalledByMSI element in extension {0} cannot be 'true' when installing an extension through the Extensions and Updates Installer.  The element can only be 'true' when an MSI lays down the extension manifest file..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInstallExtensionSDKDirectoryExists">
            <summary>
              Looks up a localized string similar to The path where the Extension SDK is to be installed already exists, please verify. Path: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInstallRequiresElevation">
            <summary>
              Looks up a localized string similar to The extension '{0}' requires administrative privileges in order to be installed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInvalidAttributeValue">
            <summary>
              Looks up a localized string similar to Element '{0}' has invalid value for attribute '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInvalidAttributeValueLength">
            <summary>
              Looks up a localized string similar to Element '{0}' has attribute '{1}' with value '{2}' whose length is greater than maximum value of {3}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInvalidCount">
            <summary>
              Looks up a localized string similar to Element '{0}' has invalid number for child element '{1}'. Expected value between {2} and {3}. Actual is {4}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInvalidElementValue">
            <summary>
              Looks up a localized string similar to Element '{0}' has invalid value for child element '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInvalidElementValueLength">
            <summary>
              Looks up a localized string similar to Element '{0}' has child element '{1}' with value '{2}' whose length is greater than maximum value of {3}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInvalidHotloadExtensionPath">
            <summary>
              Looks up a localized string similar to File path {0} is not valid for hotloadable extensions..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInvalidInstallationTargetPlatformArchitecture">
            <summary>
              Looks up a localized string similar to Target platform architecture for {0} version {1} is not valid. Actual is {2}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInvalidJsonManifest">
            <summary>
              Looks up a localized string similar to The VSIX's {0} file could not be loaded..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInvalidLanguagePackManifestRootElement">
            <summary>
              Looks up a localized string similar to Expected root element of '{{http://schemas.microsoft.com/developer/vsx-schema/2011}}PackageLanguagePackManifest' or '{{http://schemas.microsoft.com/developer/vsx-schema-lp/2010}}VsixLanguagePack' for VSIX language pack manifest. Actual is '{0}'.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInvalidManifest">
            <summary>
              Looks up a localized string similar to This VSIX does not apply to any product installed on this machine. The problem could be that the VSIX manifest's format is not recognized, or that the manifest has been corrupted..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInvalidManifestFileExtension">
            <summary>
              Looks up a localized string similar to The extension manifest file must be named '{0}'..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInvalidManifestRootElement">
            <summary>
              Looks up a localized string similar to Expected root element of '{{http://schemas.microsoft.com/developer/vsx-schema/2011}}PackageManifest' or '{{http://schemas.microsoft.com/developer/vsx-schema/2010}}Vsix' for VSIX manifest. Actual is '{0}'.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInvalidMinimumCount">
            <summary>
              Looks up a localized string similar to Element '{0}' has invalid number for child element '{1}'. Expected value greater than {2}. Actual is {3}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInvalidPath">
            <summary>
              Looks up a localized string similar to The path '{0}' is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInvalidPath_Args2">
            <summary>
              Looks up a localized string similar to The path '{0}' defined in the {1} file is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInvalidVSIX">
            <summary>
              Looks up a localized string similar to The file is not a valid VSIX package..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorInvalidVsixIdInCatalog_Args1">
            <summary>
              Looks up a localized string similar to The package '{0}', defined in the catalog file must have a valid VsixId defined..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorLowerPackage_Args1">
            <summary>
              Looks up a localized string similar to Installation of {0} failed. The extension has a lower version than required by Visual Studio.  Please install the extension from Visual Studio Installer instead..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorMissingComponent">
            <summary>
              Looks up a localized string similar to Installation of {0} failed. To install this extension please install at least one of the following components: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorMissingEula">
            <summary>
              Looks up a localized string similar to The package does not contain the software license agreement that is specified in the extension manifest ({0})..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorMissingInstallationTargetPlatformArchitecture">
            <summary>
              Looks up a localized string similar to Target platform architecture for {0} version {1} is missing and is required..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorMissingLocalizedResources_Args2">
            <summary>
              Looks up a localized string similar to Vsix Catalog Invalid: {0} '{1}' must have 'localizedResources' element defined for en-US.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorMissingManifest">
            <summary>
              Looks up a localized string similar to This VSIX package is invalid because it does not contain the file {0} at the root. The VSIX file may be corrupted..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorMissingNameOrAuthor">
            <summary>
              Looks up a localized string similar to The extension must contain a Name and Author..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorMissingPackage_Args1">
            <summary>
              Looks up a localized string similar to A value for '{0}' needs to be specified in the catalog..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorMissingPackage1_Args1">
            <summary>
              Looks up a localized string similar to Unable to find component in product catalog with this ID: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorMissingReferences">
            <summary>
              Looks up a localized string similar to This extension cannot be installed because the following references are missing:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorMissingRequiredAttribute">
            <summary>
              Looks up a localized string similar to Element '{0}' is missing required attribute '{1}' or attribute value is whitespace..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorMissingRequiredElement">
            <summary>
              Looks up a localized string similar to Element '{0}' is missing required child element '{1}' or child element value is whitespace..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorMissingTargetFramework">
            <summary>
              Looks up a localized string similar to The extension '{0}' requires a version of the .NET Framework that is not installed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorNestedExtensionFailed">
            <summary>
              Looks up a localized string similar to The extension '{0}' nested within '{1}' failed to install..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorNestedExtensionInitialization">
            <summary>
              Looks up a localized string similar to The nested extension with Identifier '{0}' could not be initialized..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorNestedExtensionReferenceIdMismatch">
            <summary>
              Looks up a localized string similar to The extension reference ('{0}') does not match the ID of the nested extension ('{1}') at '{2}'..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorNestedVsixBrokenInternalDependency">
            <summary>
              Looks up a localized string similar to The version of this extension does not fall in the version range specified in one or more of its nested extensions. Please make sure that all version requirements are met..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorNoPerUserOutOfConeFiles">
            <summary>
              Looks up a localized string similar to Unable to install files outside of extension directory when installing per-user..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorNotValidSignedAllUserExtension">
            <summary>
              Looks up a localized string similar to CertError004: Certificate check failed as extension is not a valid signed all user extension..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorNotValidSignedPerUserExtension">
            <summary>
              Looks up a localized string similar to CertError007: Certificate check failed as extension is not a valid signed per user extension..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorOutOfDiskSpaceExceptionBody">
            <summary>
              Looks up a localized string similar to An error has occurred due to low disk space. Visual Studio performance may be impacted. To resolve, please free up space..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorOutOfDiskSpaceExceptionTitle">
            <summary>
              Looks up a localized string similar to Low Disk Space.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorPerUserExperimentPartialManifestType">
            <summary>
              Looks up a localized string similar to Extension '{0}' must be installed for all users..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorReferenceConstraint">
            <summary>
              Looks up a localized string similar to The extension with identifier '{0}' could not be installed because one of its references' constraints (Identifier: '{1}', MinVersion: {2}, MaxVersion: {3}) could not be satisfied since the reference is currently installed with version {4}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorUninstallDependencyException">
             <summary>
               Looks up a localized string similar to This extension cannot be uninstalled because an error was thrown when uninstalling the nested extension '{0}'.
            {1}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorUninstallDependentComponent">
            <summary>
              Looks up a localized string similar to Uninstall of {0} failed. To uninstall this extension please uninstall all of the following components: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorUninstallMSIExtension">
            <summary>
              Looks up a localized string similar to You need to use the Programs and Features pane in the Windows Control Panel to remove {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorUninstallOrphanedComponentRequiresElevation">
            <summary>
              Looks up a localized string similar to Could not uninstall orphaned component '{0}'. Administrator rights are required to uninstall the orphaned component. Please retry uninstalling the extension '{1}' with administrator rights..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorUninstallRequiresElevation">
            <summary>
              Looks up a localized string similar to The extension '{0}' requires administrative privileges in order to be uninstalled..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorUnknownProtocol">
            <summary>
              Looks up a localized string similar to Could not determine the protocol used for this gallery. The URL must point to an Atom Feed configured for hosting Visual Studio Extensions..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorUnlistedPart">
            <summary>
              Looks up a localized string similar to There are files included in this VSIX that are not listed in the manifest.json file..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorUnsignedCatalog">
            <summary>
              Looks up a localized string similar to The extension's catalog is not signed, which is required when PartialManifestType is 'Experiment'.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorUnsupportedProduct">
            <summary>
              Looks up a localized string similar to This extension is not supported on the current product..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorUpgradeInProgress">
            <summary>
              Looks up a localized string similar to Visual Studio is in the process of performing an upgrade. Unable to install extension during upgrade..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ErrorVsixVersionOutOfRange">
            <summary>
              Looks up a localized string similar to This version of the extension falls outside of the supported range and cannot be installed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.InstalledByMultipleText">
            <summary>
              Looks up a localized string similar to Multiple Extensions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.InvalidReleaseNotesText">
            <summary>
              Looks up a localized string similar to Release notes are invalid or missing..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.OnlineRatingToolTipFormatString">
            <summary>
              Looks up a localized string similar to {0} stars.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.OnlineVotesMultiple">
            <summary>
              Looks up a localized string similar to Votes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.OnlineVotesSingle">
            <summary>
              Looks up a localized string similar to Vote.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.OnlineVotesStringFormat">
            <summary>
              Looks up a localized string similar to ({0} {1}).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ProductUpdatesNodeText">
            <summary>
              Looks up a localized string similar to Product Updates.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ReleaseNotesDialogTitle">
            <summary>
              Looks up a localized string similar to Release Notes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.SetupInstanceNotLaunchable">
            <summary>
              Looks up a localized string similar to Found setup instance {0} but not in launchable state..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.SetupLogEmitted">
            <summary>
              Looks up a localized string similar to Additional install details are available in the log at '{0}'..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.Sharepoint_ListNotFoundOnServer">
            <summary>
              Looks up a localized string similar to The specified list could not be found on the server..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.StreamNotSeekable">
            <summary>
              Looks up a localized string similar to The given stream must have the ability to seek..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.TaskCreatedSuccessfully">
            <summary>
              Looks up a localized string similar to {0}: {1} has been successfully created..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.TaskDoesNotExist">
            <summary>
              Looks up a localized string similar to {0}: {1} does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.TaskExists">
            <summary>
              Looks up a localized string similar to {0}: {1} already exists..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.TaskNotRegistered">
            <summary>
              Looks up a localized string similar to {0}: {1} has not been successfully registered..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.TaskServiceNotConnected">
            <summary>
              Looks up a localized string similar to {0}: Task Service has not been connected..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ToolsOptions_InvalidName">
            <summary>
              Looks up a localized string similar to Name must be non-empty..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ToolsOptions_InvalidURL">
            <summary>
              Looks up a localized string similar to URL must be well formed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.UnlistedPartLogHeader">
            <summary>
              Looks up a localized string similar to All files installed by the VSIX must be listed in the manifest.json file.  The following files need to be added to manifest.json:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.UnscheduleDowngradeExtension">
            <summary>
              Looks up a localized string similar to Remove {0} from the list of extensions scheduled for revert..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.UnscheduleExtension">
            <summary>
              Looks up a localized string similar to Unschedule {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.UnscheduleInstallExtension">
            <summary>
              Looks up a localized string similar to Remove {0} from the list of extensions scheduled for install..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.UnscheduleUninstallExtension">
            <summary>
              Looks up a localized string similar to Remove {0} from the list of extensions scheduled for uninstall..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.UnscheduleUpdateExtension">
            <summary>
              Looks up a localized string similar to Remove {0} from the list of extensions scheduled for update..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ValidateError_InvalidOperation">
            <summary>
              Looks up a localized string similar to The operation cannot be executed at this time. The object {0} is not null..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.ValidateError_StringEmpty">
            <summary>
              Looks up a localized string similar to The string is empty..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.VisualStudioGalleryNodeText">
            <summary>
              Looks up a localized string similar to Visual Studio Marketplace.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.VisualStudioUpdateDescription">
            <summary>
              Looks up a localized string similar to A cumulative update with new features, updated components, and servicing fixes issued..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.VisualStudioUpdateTitle">
            <summary>
              Looks up a localized string similar to {0} update version {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.VSIXLanguagePackSchema">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineResources.VSIXManifestSchema">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache.ExtensionsToDelete">
            <summary>
            List that marks what extensions we should uninstall after installing an extension. These
            will be deleted by HandleRemoveOldPerUserExtensionManifestFlag after we install/modify
            and extension using the VSIX Installer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache.ExtensionLocationMap">
            <summary>
            Dictionary that maps an installed extension to its install location.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache.InstallPathHashSet">
            <summary>
            HashSet that contains all extension install paths.
            </summary>
            TODO: leverage hashset when adding/removing/managing extensions
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache.LocationExtensionMap">
            <summary>
            Dictionary that maps all installed extensions to their install location.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache.ShouldDeleteExtensionMetadata">
            <summary>
            If the engine mode is set to ScanAlways and is not set to SafeScanAlways, The extension meta data might be recreated after deleting it.
            In case of SafeScanAlways, we should skip this step and only do when the extension data is stale.
            By default it is not recreated when the Mode is included SafeScanAlways.
            Note: Avoid changes the behavior of this property for the mode SafeScanAlways.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache.IsCacheVersionValid">
            <summary>
            Version is valid as long as the format is correct with a number after the colon is, a number.
            This is because we allow ONLY backwards compatible registry schema updates such as adding a new property.
            We NEVER allow a rename or deletion of an in-use property. (the deletions from v1-&gt;v2 were purely dead code and done during preview to ensure we had clean caches on release)
            Additionally, missing properties are treated as empty and should result in a rescan to ensure things get updated.
            If we really need to break compatibility we can simply change the format.
            Here are what the versions mean as far as the feature set requiring a bump:
            1 - Initial release of registry caching, 17.2 (many properties)
            2 - Updated release of registry caching with many performance improvements, 17.2 (reduction of properties)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache.ProcessExtension(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionStored,Microsoft.VisualStudio.ExtensionManager.Impl.Settings.CacheMode)">
            <summary>
            Adds the provided extension to all the extension dictionaries and hashsets for quicker access.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache.ProcessExtensionAsync(Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionStored,Microsoft.VisualStudio.ExtensionManager.Impl.Settings.CacheMode)">
            <summary>
            This method should only ever be called if the caller has obtained the `MetadataSemaphore` semaphore.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache.ReadExtensionOrMarkForDeletionIfMissingSingleTryAsync(Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore,System.Collections.Generic.List{Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionStored},Microsoft.VisualStudio.ExtensionManager.Impl.Settings.CacheMode,System.String)">
            <summary>
            This method should only ever be called if the caller has obtained the `MetadataSemaphore` semaphore.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache.RemoveExtensionFromLists(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Removes the provided extension from all the extension dictionaries and hashsets for
            quicker access.
            </summary>
            <returns>
            True if successfully removed, false if the extension wasn't found or unable to remove.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsCache.ShouldSaveToCache(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Only save if one of the following is true:
            Extension is new
            Extension version is new
            One of the "state" items has changed.
            </summary>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsStoreList.Extensions">
            <summary>
            This is a list of all the IInstalledExtensions that have been added to this list 
            via the Add method. This list does *not* contain IInstalledExtensions for items 
            that were read from the settings store.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ExtensionSettingsStoreList.LoadExtensionListFromStore(Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore)">
            <summary>
            Loads an extension list from the registry. 
            </summary>
            <remarks>Store MUST be a read-only settings store.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionLocationManager.InitializeRootMaps">
            <summary>
            Initializes the root maps for installed extensions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionLocationManager.GetVsExtensibilityPerMachinePath">
            <summary>
            Per-Machine root for hotloadable extensions:
            [installDir]\common7\ide\VSExtensions
            </summary>
            <returns>Full folder path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionLocationManager.GetVsExtensibilityPerUserPath">
            <summary>
            Per-user root for hotloadable extensions:
            %localappdata%\microsoft\visualstudio\17.0_xxxxxx\VSExtensions
            </summary>
            <returns>Full folder path.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList">
            <summary>
            Wrapper class that synchronizes the scan and cache modules for use in the extension engine.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList.ExtensionLocationMap">
            <summary>
            Dictionary that maps an installed extension to its install location.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList.ExtensionsLoaded">
            <summary>
            Waitable event that activates when the extension list has been populated fully with
            scanned or cache content.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList.ExtensionsToDelete">
            <summary>
            List of extensions that should be deleted after initializing the cache. This includes
            extensions that:
            - A newer version was installed
            - It's direct dependencies have been removed -
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList.InstallPathHashSet">
            <summary>
            HashSet that contains all extension install paths.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList.LocationExtensionMap">
            <summary>
            Dictionary that maps all installed extensions to their install location.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList.AddToInstalledListAndMergeWithCacheAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ExtensionManager.IInstalledExtension},System.Threading.CancellationToken,Microsoft.VisualStudio.ExtensionManager.Impl.Settings.CacheMode,System.Nullable{System.Boolean})">
            <summary>
            Adds the provided list of extensions to the <see cref="P:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList.InstalledExtensionList" />, which
            loads when VS starts.
            </summary>
            <param name="extensions">List of extensions to enable loading for.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList.GetAssetProperties(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            this is ported from cached installed extension list and appears to be mostly for testing.
            </summary>        
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList.GetExtensionContainingPackageGuid(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList.GetExtensionPacks(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList.GetExtensions(System.Func{Microsoft.VisualStudio.ExtensionManager.EnabledState,System.Boolean},System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList.GetLoadableAndEnableExtensionsFromScanResultAsync(Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ScanResult,System.Threading.CancellationToken,Microsoft.VisualStudio.ExtensionManager.Impl.Settings.CacheMode,System.Nullable{System.Boolean},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList.LoadExtensionsFromCacheAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken,System.Boolean,Microsoft.VisualStudio.ExtensionManager.Impl.Settings.CacheMode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList.ScanInstalledExtensionsAsync(System.Boolean,System.Boolean,Microsoft.VisualStudio.ExtensionManager.ITelemetryLogger,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionSettingsList.SetPackComponent(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,System.Boolean,Microsoft.VisualStudio.ExtensionManager.Impl.Settings.CacheMode)">
            <summary>
            Sets whether or not an extension is a PackComponent. This method should only be called
            after the initial cache population has been completed.
            </summary>
            <param name="extension">The extension to mark/unmark as a pack component.</param>
            <param name="isPackComponent">
            True to mark as a pack component. False to unmark as a pack component.
            </param>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionStoredReadMode.OnlyStateItems">
            OnlyStateItems enables parsing of only enable state, per machine, install date, auto-update, and pack component flags.
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionStored">
            <summary>
            Class used to save and delete extensions from the InstalledPerMachine registry directory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.InstalledExtensionStored.GetInstalledExtension(Microsoft.VisualStudio.ExtensionManager.IEngineHost)">
            <summary>
            If the package guids count changes after constructing the InstalledExtensionImpl we will write the update to the store.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ExtensionImpl.Dev17Version">
            <summary>
            17.0 version cut-off for installation target version range.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ExtensionImpl.packageManifestSerializer">
            <remarks>
            Creating multiple copies of these serializers in this way could cause memory leaks. That's why only a single copy of each is being
            created so that they can be reused.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionImpl.CreateExtensionFromManifest(System.IO.Stream)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.ExtensionManager.IExtension" /> from the specified manifest stream.
            </summary>
            <param name="manifestStream">A stream containing the vsixmanifest contents.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.ExtensionManager.IExtension" /> object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionImpl.EscapeString(System.String)">
            <summary>
            Escapes characters in a string that are invalid file name characters with the same
            convention as URI escaping (%hh). The % character is therefore, also escaped.
            </summary>
            <returns>The escaped representation of the original string</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionImpl.LoadSchemas">
            <summary>
            This method will explicitly load the schemas into a static variable. This improves
            performance by not doing the work to load them for each extension manifest file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionImpl.UnescapeString(System.String)">
            <summary>
            Replaces escaped characters in the input string with the actual characters represented
            by the escape sequences.
            </summary>
            <returns>The unescaped representation of the input string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionImpl.UnloadSchemas">
            <summary>
            This method will unload the static instances of the schemas to free up memory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionImpl.LocalizeExtension(System.String,System.String)">
            <summary>
            Replaces an extension's localizable values with values from a language pack extension.
            </summary>
            <param name="langPackManifestPath">
            A path to the language pack manifest which contains the localized values.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionImpl.GetProductChain">
            <summary>
            Gets a list of pairing from SKU to sub-SKU. A (KEY, VALUE) pair returned here implies
            that any extensions that are supported on VALUE are also supported on KEY.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionImpl.GetVSIXValidatingReader(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Provides an XmlReader with schema validation for vsix manifests.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionImpl.VerifyStringNotPresent(System.String,Microsoft.VisualStudio.ExtensionManager.ExtensionImpl.ErrorInfo)">
            <summary>
            Verifies that the given string is null or empty.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionImpl.CreateXmlSerializer(System.Type)">
            <remarks>
            Creating multiple copies of these serializers in this way could cause memory leaks.
            If this method is used to create an <see cref="T:System.Xml.Serialization.XmlSerializer" />, ensure that it is cached
            and reused appropriately if needed. Using the constructor that gets the <see cref="P:Microsoft.VisualStudio.ExtensionManager.ExtensionImpl.Type" /> and
            <see cref="!:Type[]" /> avoids FileNotFound exceptions being thrown trying to load
            Microsoft.VisualStudio.ExtensionEngine.XmlSerializers.dll.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.ExtensionInstallerActionImpl">
            <summary>
            The implementation fo the 'Action' metadata of a VSIX manifest.
            </summary>    
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionInstallerActionImpl.ActionTypeName">
            <summary>
            The type of the action.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionInstallerActionImpl.AdditionalElements">
            <summary>
            Specifies additional structured metadata for the asset.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionInstallerActionImpl.Attributes">
            <summary>
            The attributes of the action.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionInstallerActionImpl.RelativePath">
            <summary>
            A path to the action that is relative to the root of the extension.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.ExtensionInstallerInformationImpl">
            <summary>
            Implementation of the metadata contained in a Package manifest's 'Installer' node.
            </summary>    
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionInstallerInformationImpl.Actions">
            <summary>
            The Actions to perform during installation operations.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionInstallerInformationImpl.Chip">
            <summary>
            The package's chip architecture.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionInstallerInformationImpl.References">
            <summary>
            A collection of the extension's Willow dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionMethods.IsProductSupported(Microsoft.VisualStudio.ExtensionManager.IExtension,Microsoft.VisualStudio.ExtensionManager.IEngineHost)">
            <summary>
            Indicates if the given extension is supported on a host.
            </summary>
            <param name="extension">Given extension</param>
            <param name="hostProperties">The host to check.</param>
            <returns>True if the given extension is supported on a host, otherwise false</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.ExtensionReferenceCollection">
            <summary>
            Collection which allows extension references to be looked up by their identifier.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.ExtensionSdkImpl">
            <summary>
            Implementation of an InstallationTarget of type Extension Sdk
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.ExtensionSettingsStoreListKey">
            <summary>
            Key for an Extension Settings Store List entry.
            
            Do not add / remove properties from this key (at least, for lists that are known
            to older versions of VS). Older VS versions depend on its current format, and may
            stop working correctly if this is modified.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.ExtensionUpdate">
            <summary>
            The update identity contains the information required to update the update hub with
            notifications indicating updates to extensions, visual studio, etc.
            </summary>
            <remarks>
            This needs to be public so the ExtensionManagerServiceModule can use it.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionUpdate.#ctor(System.Guid,System.String,System.String,System.String,System.Version,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,Microsoft.VisualStudio.ExtensionManager.IOnlineExtension,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="repositoryId">Guid for the repository the update came from</param>
            <param name="identifier">Identifier for the update</param>
            <param name="name">Name to show to users</param>
            <param name="description">Description of the update to show to users</param>
            <param name="updateVersion">Version of the update</param>
            <param name="lcid">LCID of the UI culture used to get the strings from the update</param>
            <param name="isAutoUpdate">Whether this update is from an auto-update</param>
            <param name="displayIfNotPresent">Display the update even if the extension is not installed</param>
            <param name="isVSUpdate">This flag is now deprecated as Visual Studio update has moved to a different provider.</param>
            <param name="setupCommandLine">Command line argument (if any) that should be passed to the Setup Installer.</param>
            <param name="applicableSKUs">Applicable skus (if any) that should be used to filter notifications.</param>
            <param name="repositoryEntry">Repository entry of this extension update</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionUpdate.RepositoryId">
            <summary>
            Guid which identifies which repository the update came from. This is the guid of the provider in the registry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionUpdate.Identifier">
            <summary>
            Identifier for the update
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionUpdate.Name">
            <summary>
            Name which will be shown to users in the update hub for this update.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionUpdate.Description">
            <summary>
            Description which will be shown to the user in the update hub
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionUpdate.UpdateVersion">
            <summary>
            Version of the update.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionUpdate.LCID">
            <summary>
            Locale identifier in use when the update information was requested
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionUpdate.DisplayIfNotPresent">
            <summary>
            Display the update even if the extension is not installed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionUpdate.IsVSUpdate">
            <summary>
            This flag is now deprecated as Visual Studio update has moved to a different provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionUpdate.SetupCommandLine">
            <summary>
            Finds the command line argument (if any) that should be passed to the Setup Installer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionUpdate.ApplicableSKUs">
            <summary>
            Gets the applicable skus list (if any) that should be used to filter notifications
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionUpdate.IsAutoUpdate">
            <summary>
            Gets whether this update is from an auto-update.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionUpdate.IsPerMachine">
            <summary>
            Gets whether this update is per-machine / installed for all users.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionUpdate.RepositoryEntry">
            <summary>
            Gets the repository entry for auto updates
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.HashHelpers.GetStableHashCode(System.String,System.Boolean)">
            <summary>
            Returns a hash code for <paramref name="s" />.  The reason to use this over String.GetHashCode()
            is to guarantee consistent results across product versions.
            </summary>
            <param name="s">String to hash</param>
            <param name="ignoreCase">Indicates whether to generate a case-insensitive hash using Char.ToLowerInvariant</param>
            <returns>The hash code</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.InfoBarPrompt">
            <summary>
            Manages the lifetime of an infobar.
            </summary>
            <param name="serviceProvider">A service provider.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InfoBarPrompt.#ctor(System.IServiceProvider)">
            <summary>
            Manages the lifetime of an infobar.
            </summary>
            <param name="serviceProvider">A service provider.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.InfoBarPrompt.TextSpans">
            <summary>
            Gets a list of text spans to show the user in the prompt.
            </summary>
            <remarks>
            <para>Objects that may be instantiated for this collection include:
            <list type="bullet">
            <item><see cref="T:Microsoft.VisualStudio.Shell.InfoBarTextSpan" /></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.InfoBarPrompt.DismissingActions">
            <summary>
            Gets a list of actions that the user can take in response to the prompt that should dismiss the infobar.
            </summary>
            <remarks>
            <para>Objects that may be instantiated for this collection include:
            <list type="bullet">
            <item><see cref="T:Microsoft.VisualStudio.Shell.InfoBarButton" /></item>
            <item><see cref="T:Microsoft.VisualStudio.Shell.InfoBarHyperlink" /></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.InfoBarPrompt.MoreInfoActions">
            <summary>
            Gets a list of actions that the user can take in response to the prompt that should not dismiss the infobar.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.InfoBarPrompt.MoreInfoActionHandler">
            <summary>
            Gets a callback to invoke with any <see cref="P:Microsoft.VisualStudio.ExtensionManager.InfoBarPrompt.MoreInfoActions" /> button activated by the user.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallableExtensionImpl.VerifySignaturePolicy(System.IO.Packaging.ZipPackage,System.IO.Packaging.PackageDigitalSignature@)">
            <summary>
            Verifies that a package meets the signing policy of a VSIX package as follows...
                1. The VSIX package must contain only one signature.
                2. All package parts must be signed by the one signature.
            The signature is returned through the out parameter if the package meets the above criteria.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallableExtensionImpl.GetUncompressedSize(System.IO.Packaging.ZipPackage)">
            <summary>
            Calculates the uncompressed size of a Zip Package in bytes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstallableExtensionImpl.InitializeNestedExtension(System.IO.Packaging.ZipPackage,Microsoft.VisualStudio.ExtensionManager.IExtensionReference,System.Func{System.IO.Stream,Microsoft.VisualStudio.ExtensionManager.InstallableExtensionImpl})">
            <summary>
            Extracts an extension that is nested inside of a parent VSIX using to given function to initialize the extension from the stream.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.InstalledExtensionBatch">
            <summary>
            Provides a view over an <see cref="T:Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionList" /> after a batch of installs and uninstalls.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.InstalledExtensionBatch._addedExtensionsList">
            <summary>
            The list of added extensions
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.InstalledExtensionBatch._deletedExtensionsList">
            <summary>
            The list of deleted extensions
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.InstalledExtensionBatch._backingExtensionList">
            <summary>
            The original list of extensions before any installs/uninstalls
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstalledExtensionBatch.TryUpgrade(Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionList,Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Attemps to update the given extension.
            </summary>
            <param name="list">the list of extensions</param>
            <param name="extension">the extension to update</param>
            <returns>true, if a lower version of the extension was present</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstalledExtensionBatch.GetTemporaryModifiableExtension(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Gets a copy of the extensions which can be modified without changing the underlying extension or extensions list
            </summary>
            <param name="extension">the extension to  modify</param>
            <returns>a modifiable copy of the extension or the extension if it is modifiable</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstalledExtensionBatch.GetUnchangedExtensions(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ExtensionManager.IInstalledExtension})">
            <summary>
            Filters out all extensions from the backing list that appear in the added/deleted extensions lists
            </summary>
            <param name="extensionsFromBackingList">list of extensions from the backing list</param>
            <returns>the extensions only in the backing list</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.InstalledExtensionBatch.TempInstalledExtension">
            <summary>
            Represents an IInstalledExtension that does not modify the file system when the IsPackComponent property is set
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.InstalledExtensionImpl.IsProductUpdate">
            <summary>
            Treat extension as a Product Update if any InstallationTarget has a "ProductUpdate" Attribute set to "true"
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.InstalledExtensionList.dependentExtensions">
            <summary>
            The dependentExtensions member maps extension IDs to a list of IInstalledExtensions that correspond to extensions 
            that have a dependency on the key extension ID.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.InstalledExtensionListData">
            <summary>
            Represents an delay-loaded cached installed list used by a partitioned installed extension list with filter delegates to
            ensure the list is not requested until needed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.InstalledExtensionListData.#ctor(Microsoft.VisualStudio.ExtensionManager.ExtensionEngineImpl,Microsoft.VisualStudio.Threading.AsyncLazy{Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionSettingsList})">
            <summary>
            Private constructor. This should only ever by instantiated through <see cref="!:CreateExtensionListData" /> method.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.InstalledExtensionListData.ExtensionFilter">
            <summary>
            Returns true if the list supports the given installed extension
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.InstalledExtensionListData.AssetTypeFilter">
            <summary>
            Returns true if the list supports the given asset type
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.LazyWeakReference`1">
            <summary>
            Represents a typed weak reference, that can restore its value from the given instance factory function. Handles can be
            retrieved from the referenced object that prevent the object from being garbage collected until all handles have been
            disposed.
            </summary>
            <typeparam name="T">the type of object referenced</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.LazyWeakReference`1.Target">
            <summary>
            Retrieves the value of the object (re-initializing if necesssary).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.LazyWeakReference`1.#ctor(System.Func{`0})">
            <summary>
            Creates a lazy weak reference with the given initialization function.
            </summary>
            <param name="instanceFactory">the initialization function</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.LazyWeakReference`1.Reset">
            <summary>
            Resets the value so it will be reinitialized when requested again.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.LazyWeakReference`1.GetHandle">
            <summary>
            Retrieves a handle that prevents the object from being garbage collected until the handle is disposed or
            <see cref="M:Microsoft.VisualStudio.ExtensionManager.LazyWeakReference`1.Reset" /> is called.
            </summary>
            <returns>the handle</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.MutexHandler.TryAcquireMutex">
            <summary>
            Tries to acquire the mutex.
            </summary>
            <returns>True if the mutex was successfully acquired; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.NativeMethods.GetProcessesUsingFiles(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Get an enumeration of Processes that are using the given enumeration of files.
            
             For this purpose we will use the Restart Manager, which as far as I know is the only
             supported way of obtaining this information.
             </summary>
             <param name="filePaths">List of file names to check.</param>
             <returns>Enumeration of processes that are using any of the given files.
             Will return an empty enumeration if no processes are using the files.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.NativeMethods.GetExecutableFileName">
            <summary>
            Get the path to the current executable.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.NgenManager">
            <summary>
            Manages ngen installer actions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.NgenManager.Install(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Perform an ngen install action for the installed extension.
            </summary>
            <param name="extension">The installed extension.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.NgenManager.Uninstall(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Perform an ngen uninstall action for the installed extension.
            </summary>
            <param name="extension">The installed extension.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.NgenManager.GetIsArchX86(Microsoft.VisualStudio.ExtensionManager.IExtensionInstallerAction,System.String)">
            <summary>
            Determines which ngen architecture to use for the action.
            </summary>
            <param name="ngenAction">The ngen action command.</param>
            <param name="packageArchitecture">The package's architecture</param>
            <returns>True if the 32-bit ngen should be used; otherwise false.</returns>
            <remarks>Determines the architecture by first examining the "Chip" attribute of the ngen action, then falling back to the package's architecture, before finally assuming the 32-bit is preferred.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.VisualStudio.ExtensionManager.NgenManager.ExeConfig" -->
        <member name="M:Microsoft.VisualStudio.ExtensionManager.PackageInstaller.MatchDependency(Microsoft.VisualStudio.Setup.Dependencies.DependencyComparer,Microsoft.VisualStudio.Setup.Dependency,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Microsoft.VisualStudio.Setup.IPackage}})">
            <summary>
            Finds the package that satisfies the dependency requirement
            </summary>
            <param name="dependency">The dependency</param>
            <param name="packages">all available packages</param>
            <returns>[Optional] The packages that satisfy the dependency</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.ReferencedApiScanner">
            <summary>
            Scans assemblies and whole extensions for references to APIs of interest.
            </summary>
            <remarks>
            Instance members of this class are free-threaded and are not thread-safe.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ReferencedApiScanner.ReferenceAssemblies">
            <summary>
            Gets the set of assemblies of interest. Only references into these assemblies will produce output.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorAlreadyInstalled">
            <summary>
              Looks up a localized string similar to {0} is already installed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorBadAllUserExtension">
            <summary>
              Looks up a localized string similar to The extension is invalid because it contains nested extensions with different administrative rights requirements..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorBreaksExistingExtensions">
            <summary>
              Looks up a localized string similar to This extension cannot be installed because the following extensions contain dependencies that would be broken as a result of this installation:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorCannotDisablePackComponent">
             <summary>
               Looks up a localized string similar to An error occurred when disabling nested extension '{0}'.
            {1}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorCannotEnableDependency">
             <summary>
               Looks up a localized string similar to This extension cannot be enabled because an error occurred when enabling referenced extension '{0}'.
            {1}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorCertCheckFailed">
            <summary>
              Looks up a localized string similar to Certificate check failed. The public key of of the certificate used for signing the upgrade does not match with the public key of the certificate used for signing the extension that is already installed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorCertFileNotFound">
            <summary>
              Looks up a localized string similar to Certificate check failed. Certificate information of the previously installed extension could not be read..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorCertificateFieldsNotFound">
            <summary>
              Looks up a localized string similar to Certificate check failed. Public key of the previously installed extension could not be read..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorDirectoryInUse">
            <summary>
              Looks up a localized string similar to The directory where the extension is installed appears to be in use. Please close any program that may be using it..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorExtensionAndPlatformSigned">
            <summary>
              Looks up a localized string similar to Extension SDK and Platform SDK does not contain signed information..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorFilesInUse">
            <summary>
              Looks up a localized string similar to There are files locked in the extension you are trying to update / uninstall. Please close any {0}solutions that may be referencing it..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorFilesInUseAdditional">
             <summary>
               Looks up a localized string similar to 
            The following programs also appear to be locking files that need updating. Please shut them down to enable the update / uninstall.
            
            {0}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorInstallByMSI">
            <summary>
              Looks up a localized string similar to The InstalledByMSI element in extension {0} cannot be 'true' when installing an extension through the Extensions and Updates Installer.  The element can only be 'true' when an MSI lays down the extension manifest file..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorInstallExtensionSDKDirectoryExists">
            <summary>
              Looks up a localized string similar to The path where the Extension SDK is to be installed already exists, please verify. Path: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorInstallRequiresElevation">
            <summary>
              Looks up a localized string similar to The extension '{0}' requires administrative privileges in order to be installed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorInvalidAttributeValue">
            <summary>
              Looks up a localized string similar to Element '{0}' has invalid value for attribute '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorInvalidAttributeValueLength">
            <summary>
              Looks up a localized string similar to Element '{0}' has attribute '{1}' with value '{2}' whose length is greater than maximum value of {3}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorInvalidCount">
            <summary>
              Looks up a localized string similar to Element '{0}' has invalid number for child element '{1}'. Expected value between {2} and {3}. Actual is {4}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorInvalidElementValue">
            <summary>
              Looks up a localized string similar to Element '{0}' has invalid value for child element '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorInvalidElementValueLength">
            <summary>
              Looks up a localized string similar to Element '{0}' has child element '{1}' with value '{2}' whose length is greater than maximum value of {3}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorInvalidLanguagePackManifestRootElement">
            <summary>
              Looks up a localized string similar to Expected root element of '{{http://schemas.microsoft.com/developer/vsx-schema/2011}}PackageLanguagePackManifest' or '{{http://schemas.microsoft.com/developer/vsx-schema-lp/2010}}VsixLanguagePack' for VSIX language pack manifest. Actual is '{0}'.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorInvalidManifest">
            <summary>
              Looks up a localized string similar to This VSIX does not apply to any product installed on this machine. The problem could be that the VSIX manifest's format is not recognized, or that the manifest has been corrupted..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorInvalidManifestFileExtension">
            <summary>
              Looks up a localized string similar to The extension manifest file must be named '{0}'..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorInvalidManifestRootElement">
            <summary>
              Looks up a localized string similar to Expected root element of '{{http://schemas.microsoft.com/developer/vsx-schema/2011}}PackageManifest' or '{{http://schemas.microsoft.com/developer/vsx-schema/2010}}Vsix' for VSIX manifest. Actual is '{0}'.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorInvalidMinimumCount">
            <summary>
              Looks up a localized string similar to Element '{0}' has invalid number for child element '{1}'. Expected value greater than {2}. Actual is {3}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorInvalidVSIX">
            <summary>
              Looks up a localized string similar to The file is not a valid VSIX package..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorMissingEula">
            <summary>
              Looks up a localized string similar to The package does not contain the software license agreement that is specified in the extension manifest ({0})..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorMissingManifest">
            <summary>
              Looks up a localized string similar to This VSIX package is invalid because it does not contain the file {0} at the root. The VSIX file may be corrupted..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorMissingNameOrAuthor">
            <summary>
              Looks up a localized string similar to The extension must contain a Name and Author..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorMissingReferences">
            <summary>
              Looks up a localized string similar to This extension cannot be installed because the following references are missing:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorMissingRequiredAttribute">
            <summary>
              Looks up a localized string similar to Element '{0}' is missing required attribute '{1}' or attribute value is whitespace..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorMissingRequiredElement">
            <summary>
              Looks up a localized string similar to Element '{0}' is missing required child element '{1}' or child element value is whitespace..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorMissingTargetFramework">
            <summary>
              Looks up a localized string similar to The extension '{0}' requires a version of the .NET Framework that is not installed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorNestedExtensionFailed">
            <summary>
              Looks up a localized string similar to The extension '{0}' nested within '{1}' failed to install..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorNestedExtensionInitialization">
            <summary>
              Looks up a localized string similar to The nested extension with Identifier '{0}' could not be initialized..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorNestedExtensionReferenceIdMismatch">
            <summary>
              Looks up a localized string similar to The extension reference ('{0}') does not match the ID of the nested extension ('{1}') at '{2}'..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorNotValidSignedAllUserExtension">
            <summary>
              Looks up a localized string similar to Certificate check failed as extension is not a valid signed all user extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorReferenceConstraint">
            <summary>
              Looks up a localized string similar to The extension with identifier '{0}' could not be installed because one of its references' constraints (Identifier: '{1}', MinVersion: {2}, MaxVersion: {3}) could not be satisfied since the reference is currently installed with version {4}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorUninstallDependencyException">
             <summary>
               Looks up a localized string similar to This extension cannot be uninstalled because an error was thrown when uninstalling the nested extension '{0}'.
            {1}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorUninstallMSIExtension">
            <summary>
              Looks up a localized string similar to You need to use the Programs and Features pane in the Windows Control Panel to remove {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorUninstallOrphanedComponentRequiresElevation">
            <summary>
              Looks up a localized string similar to Could not uninstall orphaned component '{0}'. Administrator rights are required to uninstall the orphaned component. Please retry uninstalling the extension '{1}' with administrator rights..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorUninstallRequiresElevation">
            <summary>
              Looks up a localized string similar to The extension '{0}' requires administrative privileges in order to be uninstalled..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ErrorUnsupportedProduct">
            <summary>
              Looks up a localized string similar to This extension is not supported on the current product..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.InvalidReleaseNotesText">
            <summary>
              Looks up a localized string similar to Release notes are invalid or missing..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.ReleaseNotesDialogTitle">
            <summary>
              Looks up a localized string similar to Release Notes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.TaskCreatedSuccessfully">
            <summary>
              Looks up a localized string similar to {0}: {1} has been successfully created..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.TaskDoesNotExist">
            <summary>
              Looks up a localized string similar to {0}: {1} does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.TaskExists">
            <summary>
              Looks up a localized string similar to {0}: {1} already exists..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.TaskNotRegistered">
            <summary>
              Looks up a localized string similar to {0}: {1} has not been successfully registered..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.TaskServiceNotConnected">
            <summary>
              Looks up a localized string similar to {0}: Task Service has not been connected..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.VSIXLanguagePackSchema">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Resources_Resources_Designer_cs.VSIXManifestSchema">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Action">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Action.Any">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Action.Type">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Action.Path">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Action.AnyAttr">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Asset">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Asset.Any">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Asset.Type">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Asset.Path">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Asset.AnyAttr">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Dependency">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Dependency.Version">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Dependency.CanAutoDownload">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Dependency.IsRequired">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.DependencyInfo">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.DependencyInfo.Id">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.DependencyInfo.DisplayName">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.DependencyInfo.Location">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.DependencyInfo.AnyAttr">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Installation">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Installation.InstallationTarget">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Installation.InstalledByMsi">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Installation.InstalledByMsiSpecified">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Installation.SystemComponent">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Installation.SystemComponentSpecified">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Installation.AllUsers">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Installation.AllUsersSpecified">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Installation.Experimental">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Installation.ExperimentalSpecified">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Installation.Scope">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Installation.PartialManifestType">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Installation.PartialManifestTypeSpecified">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Installation.ExtensionType">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Installation.DotnetTargetVersions">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.InstallationTarget">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.InstallationTarget.Id">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.InstallationTarget.Version">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.InstallationTarget.TargetPlatformIdentifier">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.InstallationTarget.TargetPlatformVersion">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.InstallationTarget.SdkName">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.InstallationTarget.SdkVersion">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.InstallationTarget.AnyAttr">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Installer">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Installer.Actions">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Installer.SetupDependencies">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Installer.Chip">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Installer.Size">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Installer.License">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.ItemsChoiceType">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ItemsChoiceType.Assembly">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ItemsChoiceType.CustomExtension">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ItemsChoiceType.ItemTemplate">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ItemsChoiceType.MefComponent">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ItemsChoiceType.ProjectTemplate">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ItemsChoiceType.Sample">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ItemsChoiceType.ToolboxControl">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ItemsChoiceType.VsPackage">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Metadata">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Metadata.Identity">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Metadata.DisplayName">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Metadata.Description">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Metadata.Version">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Metadata.MoreInfo">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Metadata.License">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Metadata.GettingStartedGuide">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Metadata.ReleaseNotes">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Metadata.Icon">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Metadata.PreviewImage">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Metadata.Tags">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Metadata.Any">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.MetadataIdentity">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.MetadataIdentity.Id">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.MetadataIdentity.Version">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.MetadataIdentity.Language">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.MetadataIdentity.Publisher">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.MetadataInfo">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.MetadataInfo.DisplayName">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.MetadataInfo.Description">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.MetadataInfo.MoreInfo">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.MetadataInfo.License">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.MetadataInfo.GettingStartedGuide">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.MetadataInfo.ReleaseNotes">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.MetadataInfo.Icon">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.MetadataInfo.PreviewImage">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.MetadataInfo.Tags">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.MetadataInfo.Any">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.PackageLanguagePackManifest">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.PackageLanguagePackManifest.Metadata">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.PackageLanguagePackManifest.Installation">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.PackageLanguagePackManifest.Dependencies">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.PackageLanguagePackManifest.Assets">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.PackageLanguagePackManifest.Prerequisites">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.PackageLanguagePackManifest.Any">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.PackageLanguagePackManifest.Version">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.PackageManifest">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.PackageManifest.Metadata">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.PackageManifest.Installation">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.PackageManifest.Dependencies">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.PackageManifest.Assets">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.PackageManifest.Prerequisites">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.PackageManifest.Installer">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.PackageManifest.Any">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.PackageManifest.Version">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Prerequisites">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Prerequisites.Prerequisite">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Prerequisites.AnyAttr">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Vsix">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Vsix.Identifier">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Vsix.References">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Vsix.Content">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Vsix.Version">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.VsixAssembly">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixAssembly.AssemblyName">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixAssembly.Value">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.VsixContent">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixContent.Items">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixContent.ItemsElementName">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.VsixCustomExtension">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixCustomExtension.Type">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixCustomExtension.AnyAttr">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixCustomExtension.Value">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.Name">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.Author">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.Version">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.Description">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.Locale">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.MoreInfoUrl">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.License">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.GettingStartedGuide">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.ReleaseNotes">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.Icon">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.PreviewImage">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.InstalledByMsi">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.InstalledByMsiSpecified">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.SupportedProducts">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.SupportedFrameworkRuntimeEdition">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.SystemComponent">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.SystemComponentSpecified">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.AllUsers">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.AllUsersSpecified">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.Experimental">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.ExperimentalSpecified">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifier.Id">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.VsixIdentifierIsolatedShell">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifierIsolatedShell.Version">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifierIsolatedShell.Value">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.VsixIdentifierSupportedFrameworkRuntimeEdition">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifierSupportedFrameworkRuntimeEdition.MinVersion">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifierSupportedFrameworkRuntimeEdition.MaxVersion">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.VsixIdentifierVisualStudio">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifierVisualStudio.Edition">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixIdentifierVisualStudio.Version">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.VsixLanguagePack">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixLanguagePack.LocalizedName">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixLanguagePack.LocalizedDescription">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixLanguagePack.MoreInfoUrl">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixLanguagePack.ReleaseNotes">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixLanguagePack.License">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixLanguagePack.Version">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.VsixReference">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixReference.Name">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixReference.MoreInfoUrl">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixReference.VsixPath">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixReference.Id">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixReference.MinVersion">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixReference.MaxVersion">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.VsixSample">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixSample.ProgrammingLanguages">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixSample.TargetFrameworks">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixSample.CategorizationPath">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixSample.StartupFiles">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixSample.DefaultName">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixSample.SolutionPath">
            <remarks />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsixSample.Value">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.AtomOnlineExtension">
            <summary>
            Represents a single entry displayed in the list of items from an Atom feed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.AtomOnlineExtension.isVSUpdate">
            <summary>
            This flag is now deprecated as Visual Studio update has moved to a different provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.AtomRepository.LoadFeedAsync">
            <summary>
            This method actually does the work to download the feed. It should only ever run once per
            instance of this class. It runs on a background thread, so it is safe to make blocking
            calls (e.g. hitting the network).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.AtomRepository.LoadOOBFeed">
             <summary>
             Load the legacy notification fragment.
            
             3 keys here:
             a. If there is an update, the uri will ends with +_UpdateFeed.  If there is no update, the uri will ends with -_UpdateFeed.
             b. Make sure the setupCommnadLine attribute has a value = update.  This will ensure that
                we call willow with the update switch
             c. The version is supposed to be higher than installed version only when there is a mnaifest update
             </summary>
             <returns>Return the feed</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.AtomRepository.IsExtensionApplicableToCurrentSKU(Microsoft.VisualStudio.ExtensionManager.AtomOnlineExtension)">
            <summary>
            Determines if given extension is applicable to current SKU
            </summary>
            <param name="atomEntry">extension to check applicability for</param>
            <returns>true if extension is applicable or if the atom feed entry does not specify explicit list of applicable SKUs</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.BaseExtensionRepository">
            <summary>
            An abstract base class for IExtensionRepository.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.BaseExtensionRepository.unresolvedRepositoryServiceUri">
            <summary>
            The repository service URI is (by default) a FWLink using the 
            go.microsoft.com redirection service. We must call the ResolveFWLink
            utility method before using it.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ExtensionManager.BaseExtensionRepository.DownloadProgressChanged">
            <summary>
            Event fired as progress is made after starting a download with DownloadAsync
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ExtensionManager.BaseExtensionRepository.DownloadCompleted">
            <summary>
            Event fired when a download with DownloadASync completes, is cancelled, or has an error.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BaseExtensionRepository.CreateNewWebClient">
            <summary>
            Wrap call to create new WebClient in a protected method for stubbing out during unit testing.
            </summary>
            <returns>An instance of IExtensionManagerWebClient to use for downloading.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BaseExtensionRepository.CreateNewExtension(System.String)">
            <summary>
            Wrap call to IVsExtensionManager in a protected method for stubbing out during unit testing.
            </summary>
            <param name="localPath">The local path to a VSIX file to create an installable extension from.</param>
            <returns>An instance of IInstallableExtension for the given VSIX.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BaseExtensionRepository.MakeWebCall(System.String,System.Action)">
            <summary>
            Wraps call to webCall for overriding behavior during unit testing.
            </summary>
            <param name="webCallUrl">The Url of the web resource.</param>
            <param name="webCall">The delegate which will do the actual web invocation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.BaseExtensionRepository.TryGetAndRemoveOperation(System.Guid,System.Collections.Specialized.HybridDictionary)">
            <summary>
            Atomically gets and removes an AsyncOperation from the guidToAsyncOperationDictionary.
            </summary>
            <param name="jobId">The Guid (jobId) of the AsyncOperation to fetch.</param>
            <returns>Null if the value has been removed from the Dictionary. Otherwise, returns the matching value.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.BaseOnlineExtensionWithPropertyChange.PreviewImageNonNull">
            <summary>
            Property used for binding from XAML
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.BaseOnlineExtensionWithPropertyChange.IconNonNull">
            <summary>
            Property used for binding from XAML
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.BaseOnlineExtensionWithPropertyChange.Flags">
            <summary>
            Flags for an extension. It can contain Preview, Free/Paid/Trial etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.BaseOnlineExtensionWithPropertyChange.RatingsCountFormatted">
            <summary>
            The string used in the UI for the ratings count.
            
            e.g. (1 Vote), (0 Votes), (2 Votes)
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.ExtensionManagerDownloadClient">
            <summary>
            Manages downloading both local and online resources.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionManagerDownloadClient.SetCancellationTokens">
            <summary>
            Sets or resets the cancellation tokens for the download client.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.ExtensionRepositoryConfig">
            <summary>
            Configuration data for a single server instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionRepositoryConfig.LocDisplayName">
            <summary>
            The name of the repository that should be displayed in the UI.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.SharepointRepository">
            <summary>
            This class is not compatible with .NET. The .NET Framework version of this class should only be used.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SharepointRepository.ExecuteQuery(System.Boolean,System.String)">
            <summary>
            Synchrous method to execute a query against the Sharepoint server
            </summary>
            <param name="recursive">True to get items from all folders</param>
            <param name="folderPath">Folder to path to query under. Use null to query from the root.</param>
            <returns>A list of IOnlineExtension items for the given query</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SharepointRepository.GetFolders">
            <summary>
            Synchrous method to get the recursive list of folders in a sub-list
            </summary>
            <param name="folderPath">Folder to path to query under. Use null to query from the root.</param>
            <returns>A list of IOnlineExtension items for the given query</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SharepointRepository.GetListInfo">
            <summary>
            Method to invoke the GetListCollection web service method to retrieve info about the list 
            at the provided Url
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.UnknownRepository">
            <summary>
            Represents an instance of a repository with an unknown protocol.
            
            An UnknownRepository will issue a WebRequest to the URI of the repository. The 
            WebResponse will then be handed to the other IExtensionRepositoryFactory objects
            to look for one that positively identifies the WebResponse.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.UnknownRepository.#ctor(Microsoft.VisualStudio.ExtensionManager.IExtensionRepositoryConfig,System.Collections.Generic.IEnumerable{System.Lazy{Microsoft.VisualStudio.ExtensionManager.IExtensionRepositoryFactory,System.Collections.Generic.IDictionary{System.String,System.Object}}})">
            <summary>
            Instantiates a new UnknownRepository
            </summary>
            <param name="repositoryConfig">The ExtensionRepositoryConfig structure of the unknown repository.</param>
            <param name="extensionRepositoryFactories">All the IExtensionRepositoryFactory parts found in the composition.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.UnknownRepository.CreateResolvedRepositoryAsync">
            <summary>
            The method to run for createResolvedRepositoryTask. This method will start
            and wait on the matchProtocolTask.
            </summary>
            <returns>An IExtensionRepository instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.UnknownRepository.MatchProtocolAsync">
            <summary>
            The method to run for matchProtocolTask. This method is responsible for actually
            asking the IExtensionRepositoryFactories whether they support the WebReponse in 
            question.
            </summary>
            <returns>An IExtensionRepositoryFactory match if one is found. Otherwise, null.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.UnknownRepositoryException">
            <summary>
            Exception thrown when the Repository Protocol cannot be automatically determined.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.UnknownRepositoryFactory">
            <summary>
            The IExtensionRepositoryFactory used to instantiate an IExtensionRepository when
            the protocol of the repository is unknown.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.UnknownRepositoryFactory.#ctor(System.Collections.Generic.IEnumerable{System.Lazy{Microsoft.VisualStudio.ExtensionManager.IExtensionRepositoryFactory,System.Collections.Generic.IDictionary{System.String,System.Object}}})">
            <summary>
            This constructor allows to override ExtensionRepositoryFactories for scenarios where MEF is unavailable (VS Hub for example).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsGalleryEntry.Ranking">
            <summary>
            The ranking of the extension within a given query. This value is a heuristic computed on the VS Gallery 
            Server from various properties. Note that we do not actually use the Ranking value, as it is not
            returned by the server. We only use this property to build the query that requests that the server sort
            the results list in the order of Ranking.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VsGalleryEntry.Relevance">
            <summary>
            This property should never be set. It's only included so that we can specify "Relevance" as the sort
            order when querying the VSGallery.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VSGalleryRepository.IsExtensionsRepository">
            <summary>
            Indicates if this is the Extensions Repository.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.EngineServices">
            <summary>
            To handle the common services that needs to be added before call SetupEngine
            </summary>
            <remarks>
            This is an intermediate step before refactoring more code out and this becomes the base class.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineServices.MessageBus_MessageReceived(System.Object,Microsoft.VisualStudio.Setup.Services.MessageEventArgs)">
            <summary>
            Return the default result.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionBatchEngine.ShouldWritePackComponentFile(Microsoft.VisualStudio.Setup.Dependencies.IDependencyNode)">
            <summary>
            We want to create the pack extension when the following scenario is true
            a. The existing installed extension is a pack component
            b. If no previous version of the extension has been installed.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Extensions.ToUncPath(System.Uri)">
            <summary>
            Output to UNC formatting
            </summary>
            <param name="uri">The uri to format</param>
            <returns>The formatted UNC path</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ISetupEngineService.CreateEngine(Microsoft.VisualStudio.ExtensionManager.IEngineHost,System.IServiceProvider,Microsoft.VisualStudio.ExtensionManager.InstallFlags)">
            <summary>
            Create the engine
            </summary>
            <param name="engineHost">The engine host</param>
            <param name="serviceProvider">The service provider</param>
            <param name="installFlags">The flags that changes the install behavior</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ISetupEngineService.Install">
            <summary>
            Perform the installation
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ISetupEngineService.LoadPartialJson(System.String)">
            <summary>
            Load the json file
            </summary>
            <param name="catalogJson">The json file</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ISetupEngineService.GetProductDependencyGraph">
            <summary>
            Get the instance's graph
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ISetupEngineService.InstallPath">
            <summary>
            Gets the path to the installation root of the product.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ISetupEngineService.Instance">
            <summary>
            Gets the VS instance
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ISetupEngineService.Engine">
            <summary>
            Gets the engine instance
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SetupEngineService.CreateEngine(Microsoft.VisualStudio.ExtensionManager.IEngineHost,System.IServiceProvider,Microsoft.VisualStudio.ExtensionManager.InstallFlags)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.SetupEngineService.InstallPath">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.SetupEngineService.Instance">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.SetupEngineService.Engine">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SetupEngineService.Install">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SetupEngineService.LoadPartialJson(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.SetupEngineService.GetProductDependencyGraph">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.SetupEngineUtility">
            <summary>
            Common setupengine utility
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SetupEngineUtility.ApplyRequestedPackageState(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Setup.Cache.ISelectablePackageReference},Microsoft.VisualStudio.Setup.Dependencies.IDependencyGraph)">
            <summary>
            Setup engine does not preserve the selection state when modify is performed.  This method takes the currently
            selected packages and re-marks them as selected.
            </summary>
            <param name="selectedPackages"></param>
            <param name="productGraph"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.VsixExtractor.TemporaryPath(System.String,System.String,System.String)">
            <summary>
            Temporary file name
            </summary>
            <param name="parentName">The name of the parent VSIX</param>
            <param name="packagefileName">The VSIX name</param>
            <param name="installPath">The base path</param>
            <returns>The full temporary path</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.VsixExtractor.ExtractEmbeddedExtension(Microsoft.VisualStudio.ExtensionManager.InstallableExtensionImpl,System.String,Microsoft.VisualStudio.ExtensionManager.ILogger,Microsoft.VisualStudio.Setup.Services.IFileSystem)">
            <summary>
            Extract nested extension
            </summary>
            <param name="extension">The extension that contains the nested extension</param>
            <param name="fileDestinationDirectory">The location to extract the extension to</param>
            <param name="logger">The logger</param>
            <param name="fileSystem"><see cref="T:Microsoft.VisualStudio.Setup.Services.IFileSystem" /> interface to perform operation against.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionEngine.ExtensionsScanningStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionEngine.ExtensionsScanningStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionEngine.ExtensionsScanningStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionEngine.ExtensionsScanningStrings.AllowButtonCaption">
            <summary>
              Looks up a localized string similar to Allow.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionEngine.ExtensionsScanningStrings.DenyButtonCaption">
            <summary>
              Looks up a localized string similar to Deny.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionEngine.ExtensionsScanningStrings.InfobarMessage">
            <summary>
              Looks up a localized string similar to We'd like to scan the API usage of all installed Visual Studio Extensions to improve quality. This information will be used to identify compatibility issues and improve the Visual Studio experience..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionEngine.ExtensionsScanningStrings.PrivacyPolicyButtonCaption">
            <summary>
              Looks up a localized string similar to Privacy Statement.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.IExtensionHotloadWatcher.PerMachineFilePath">
            <summary>
            Retrieve the file path for per-machine hotload registration.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.IExtensionHotloadWatcher.PerUserFilePath">
            <summary>
            Retrieve the file path for per-user hotload registration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.IExtensionHotloadWatcher.ProcessHotloadRegistrationAsync(System.Threading.CancellationToken)">
            <summary>
            Handler for when a new registration occurs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.ExtensionMetadataStore.ReadExtensionsFromStream(System.IO.FileStream)">
            <summary>
            This is intentional, we need to have the spans done in a sync method so the compiler can guarantee no context switching.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.MetadataStore.ExtensionMetadataStore.IsExtensionDataStale(Microsoft.VisualStudio.ExtensionManager.IEngineHost)">
            <summary>
            Checks if the cached data is stale by comparing its timestamp with the extension engine file based timestamp.
            We should check the timestamp to ensure it is up-to-date.
            </summary>
            <returns>True if the data is stale, false if it is still up to date.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.SingleFileWatcher">
            <summary>
            Wraps a FileSystemWatcher and does not inherit as we are explicitly looking at a single file
            for updates and need to guard against it not existing yet.. We need to only know about true
            changes to the file, so we must debounce. Debouncing is required because of the way windows
            events happen, a file save can have two:
            1. Writing content.
            2. Writing metadata. For some reason these two steps are not done in one step, and thus the
            caller must either handle double processing, or we must batch updates. This implementation
            chooses to batch updates in a configurable interval with a default of <see cref="F:Microsoft.VisualStudio.ExtensionEngine.Impl.Settings.SingleFileWatcher.DefaultDebounceInterval" />
            </summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>ekrlkLBCt/6hRggVu+YX+JScIjXW4hwJC4I3NCReHl8=</DigestValue></Reference></SignedInfo><SignatureValue>rmrlIuIT8m3LpVIwMnZnV+hJ8gZgYA7IANwn1AmkyeIzzrUss2bputrr344A+EjDvy/WJQll5gns4+KDMmYPvHeJV3pCQrXv4zlwFltXcgjyMCJYF/8PhGLQV56Lg3CeH7aPjk7rp23VRbOzLpkhgU6F6PDVr/aQmwYSooQ1iv/E7kdLfmzWoJvlGsO+crXmChKqtTiJkKV/TNY+Wz07d/Apkv9rjDtSjtDnUGD7f5NoFrNOanzohhtYRVxykCf4yIZB0Wuj5wT/hJHtZJwV5vgl93aV+xztFQvRGIOe9CEoblAdJQ0vpUGacit5JClShX72EnZMddxVzrJU2CCdPA==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>7XpKjCg5837MnNU9UKR3xba/q5Iq/JXcyzypjF20Q6LlVwLLwX3ehPNrT4+GM2kpbhg0KF9zaTCqKCnlRY4zUat+8sk/4dUEyzAfHaZrGf+9FDPlP7GMb7dT1lsS4zDSF6swfD4xuoux9mBYJOGDoXxknpL581td3SwLX4w9MIsERD7wjZYpUc+16BXXuSjtNXhYlnrXoePKlDqlGgJCM5wuFwd7BXdS1lJrqVxytOUHyUpp3ovamSQWE7fGYQKxg4e50J/mNYzgN6AYglCeJ9QjGlnQ4a4HTLrtNuqFgG3wt6a6pFJ/C1qdvB/tki3rTRuSkGWcL8t2XJ+/j0BpeQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>MIIGAzCCA+ugAwIBAgITMwAABISY4hLgeKMxXQAAAAAEhDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMB4XDTI1MDYxOTE4MjEzNVoXDTI2MDYxNzE4MjEzNVowdDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7XpKjCg5837MnNU9UKR3xba/q5Iq/JXcyzypjF20Q6LlVwLLwX3ehPNrT4+GM2kpbhg0KF9zaTCqKCnlRY4zUat+8sk/4dUEyzAfHaZrGf+9FDPlP7GMb7dT1lsS4zDSF6swfD4xuoux9mBYJOGDoXxknpL581td3SwLX4w9MIsERD7wjZYpUc+16BXXuSjtNXhYlnrXoePKlDqlGgJCM5wuFwd7BXdS1lJrqVxytOUHyUpp3ovamSQWE7fGYQKxg4e50J/mNYzgN6AYglCeJ9QjGlnQ4a4HTLrtNuqFgG3wt6a6pFJ/C1qdvB/tki3rTRuSkGWcL8t2XJ+/j0BpeQIDAQABo4IBgjCCAX4wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYBBQUHAwMwHQYDVR0OBBYEFATf9G+hYepzHROBQMWBvZFgqW2FMFQGA1UdEQRNMEukSTBHMS0wKwYDVQQLEyRNaWNyb3NvZnQgSXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQxFjAUBgNVBAUTDTIzMDAxMis1MDUzNjIwHwYDVR0jBBgwFoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQBi0KbNV1OEU3KAyAyz+kBtzZ0RN6f1kjKetQrPGfiVL98SVhrQc2JgiDZh1Rb+ovKWBf3u/RTSuj9aCo3bsah0onAXYPDI9JPJAxQP9HlNumzwUUFCGolq4bAzq11nS5u2ZrudeqEKFFnCDbOIwX4wxFVeG5oEGH3vuPzFCcECfYepnxPpHAj+B5T+AoSEAVB6EspmpHEwb2cPkLLe7G3beSp0CpEhDdNQszxtWsApQiOsyyn/7yiMJ6h8P/lr3AK+4MCpVjZi8EzYvNO6/a1rF0HqdUPGDJCLhpmdGtagndxrjpEkc589v9KI3mVWIWcqIQkItQbPsX0ZL/38tB31d5jcjttnRVLx8wWYKhORWxo5lJ60q9cfJQqyvrOAPmzhqdiHozqYVqGRDxjnKPxxM52eS5OsOlvhNictzx6BRNGPE7ZEhOP/NGNpQSYS49u3fLnifCHUIUqS/1s04457mB+w8eaPaVnSBkmhTWLkqjmMa1VuzeABEFUQ2Xqg3H6jxtzuq+UjbMV23e9QwiEFEbVCrLOdzjfr65VdK44igSHcLzDS0PcytI8u+6MA8l16GJEMWpDdrhSATtVDQLwmF47OK8N0kZgV/aomeRDcXJ/6SzJIsm+vEHcB1F8/tXyOnmt/446TT8+g5XP0THFyFnjDJIbqf1xG8Lu91Prs/w==</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>
