<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.ExtensionEngineContract</name>
    </assembly>
    <members>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute" /> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName" /> method on the <paramref name="builderType" /> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName" /> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1" /> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute" /> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null" /> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute" /> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null" /> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null" /> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute" /> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute" /> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute" /> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
            <remarks>
            This can be used to inform tooling that a constant should be used as an argument for the annotated parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute" /> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue" />, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" />, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute" /> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute" /> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum" /> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid" /> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan" /> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref" /> as implicitly
            <see langword="scoped" /> - where the compiler does not allow the <see langword="ref" /> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this" /> for <see langword="struct" /> instance methods.</item>
                <item><see langword="ref" /> parameters that refer to <see langword="ref" /> <see langword="struct" /> types.</item>
                <item><see langword="out" /> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref" /> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.Enabled">
            <summary>
            The atom is present. CodeMarkers are enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.Disabled">
            <summary>
            The atom is not present, but InitPerformanceDll has not yet been called.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.DisabledDueToDllImportException">
            <summary>
            Disabled because the CodeMarkers transport DLL could not be found or
            an import failed to resolve.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.Performance.CodeMarkers.IsEnabled">
            <summary>
            Are CodeMarkers enabled? Note that even if IsEnabled returns false, CodeMarkers
            may still be enabled later in another component.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarker(System.Int32)">
            <summary>
            Sends a code marker event
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.Byte[])">
            <summary>
            Sends a code marker event with additional user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="aBuff">User data buffer. May not be null.</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
            <exception cref="T:System.ArgumentNullException">aBuff was null</exception>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.SetStateDLLException">
            <summary>
            Used by ManagedPerfTrack.cs to report errors accessing the DLL.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.Guid)">
            <summary>
            Sends a code marker event with additional Guid user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="guidData">The additional Guid to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.String)">
            <summary>
            Sends a code marker event with additional String user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="stringData">The additional String to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.StringToBytesZeroTerminated(System.String)">
            <summary>
            Converts a string into a byte buffer including a zero terminator (needed for proper ETW message formatting)
            </summary>
            <param name="stringData">String to be converted to bytes</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.UInt32)">
            <summary>
            Sends a code marker event with additional DWORD user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="uintData">The additional DWORD to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.UInt64)">
            <summary>
            Sends a code marker event with additional QWORD user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="ulongData">The additional QWORD to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.UsePrivateCodeMarkers(System.String,Microsoft.Win32.RegistryView)">
            <summary>
            Checks the registry to see if code markers are enabled
            </summary>
            <param name="regRoot">The registry root</param>
            <param name="registryView">The registry view.</param>
            <returns>Whether CodeMarkers are enabled in the registry</returns>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerStartEnd">
            <summary>
            Use CodeMarkerStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.  If you are using correlated
            codemarkers and providing your own event manifest, include two GUIDs (the correlation
            "marker" and the correlation ID itself) as the very first fields.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerExStartEnd">
            <summary>
            Use CodeMarkerExStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.  If you are using correlated
            codemarkers and providing your own event manifest, include two GUIDs (the correlation
            "marker" and the correlation ID itself) as the very first fields.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionEngineContract.Dotnet.Stubs.CodeMarkerEvent">
            <summary>
            This is a stub based on Microsoft.Internal.Performance.CodeMarkerEvent so that the .NET version can compile.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionEngineContract.Dotnet.Stubs.CodeMarkerStartEnd">
            <summary>
            This is a stub based on Microsoft.Internal.Performance.CodeMarkerStartEnd so that the .NET version can compile.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionEngineContract.Impl.EngineContractUtilities.VersionCutOffForSetupEngineInstaller">
            <summary>
            The lowest version of VS that will use the setup engine to install vsix v3s
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionEngineContract.Impl.EngineContractUtilities.EngineHostId">
            <summary>
            Gets or sets the id of the engine host. i.e. describes which kind of process the engine is running in.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionEngineContract.Impl.EngineContractUtilities.TryGetProductVersionFromPathPinnedMinor(System.String,System.Version@)">
            <summary>
            Call TryGetProductVersionFromPath and pin the minor version number to 0. This works around issues where dev 15 was always expected
            to be 15.0.X.Y and new changes make it 15.W.X.Y. In Dev16 this expectation has been removed and this function will not pin the version.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionEngineContract.Impl.EngineContractUtilities.PinMinorVersion(System.Version)">
            <summary>
            Pin the minor version number to 0. This works around issues where dev 15 was always expected
            to be 15.0.X.Y and new changes make it 15.W.X.Y. If the major version is 16 or greater this function
            is a no-op.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionEngineContract.Impl.EngineContractUtilities.TryGetProductVersionFromPath(System.String,System.Version@)">
            <summary>
            When we get the ProductVersion from an executable or binary built in the VSExtensibility repository
            the product version looks like 15.0.255-develop+g142f5a984f, so we need to strip out everything after the + before parsing the Version
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionEngineContract.Impl.EngineContractUtilities.RunUpdateConfigurationCoreAsync(System.String,Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Threading.CancellationToken)">
            <summary>
            Has locks in place to ensure only one UpdateConfiguration is running at a time even if called by different processes
            </summary>
            <param name="appidPath">The path to the appid executable</param>
            <returns>A task running update configuration</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionEngineContract.Impl.EngineContractUtilities.ContainsPath(System.String,System.String)">
            <summary>
            Determines whether the given <paramref name="path" /> contains the given <paramref name="fullPath" />.
            </summary>
            <remarks>
            This will canonicalize the paths (to resolve '\..\' inside the paths) before comparison.
            </remarks>
            <param name="fullPath">The full directory or file path.</param>
            <param name="path">The root path under which to check the <paramref name="fullPath" />.</param>
            <returns>
            Whether the given <paramref name="path" /> contains the given <paramref name="fullPath" />,
            or false if either path is null or an empty string.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionEngineContract.Impl.EngineContractUtilities.NormalizePath(System.String,System.Boolean)">
            <summary>
            Fixes up directory separators for the current platform and optionally terminates with a backslash.
            </summary>
            <param name="path">The path to normalize.</param>
            <param name="addBackslash">Whether to add a backslash to the end of a path if there isn't one already.</param>
            <returns>The normalized path.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionEngineContract.Impl.RetryPolicy">
            <summary>
            base class for retry actions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionEngineContract.TaskExtensions.FileAndForget(Microsoft.VisualStudio.Threading.JoinableTask,System.String,System.String,Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Func{System.Exception,System.Boolean})">
            <inheritdoc cref="M:Microsoft.VisualStudio.ExtensionEngineContract.TaskExtensions.FileAndForget(System.Threading.Tasks.Task,System.String,System.String,Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Func{System.Exception,System.Boolean})" />
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionEngineContract.TaskExtensions.FileAndForget(System.Threading.Tasks.Task,System.String,System.String,Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Func{System.Exception,System.Boolean})">
            <summary>
            Records error information when the given task faults.
            We can't use the provided FileAndForget call from VsTaskLibraryHelper because it requires ThreadHelper.JoinableTaskFactory to be accessible. This is NOT accessible in ServiceHub and other non-devenv processes that might use Extension Engine.
            We initially attempted to implement this in VsTaskLibraryHelper directly However, this did not work due to some projects in VS having incorrectly configured threading analyzers.
            </summary>
            <param name="task">The task to track failures of.</param>
            <param name="faultEventName">
            An event name following data model schema to use when filing a fault event when <paramref name="task" /> faults.
            Must not be null or empty.
            It consists of 3 parts and must follows pattern [product]/[featureName]/[entityName]. FeatureName could be a one-level feature or feature hierarchy delimited by "/".
            For examples,
            vs/platform/opensolution;
            vs/platform/editor/lightbulb/fixerror;
            This value is also provided as the source (first argument) to <see cref="M:Microsoft.VisualStudio.Shell.ActivityLog.TryLogError(System.String,System.String)" />.
            </param>
            <param name="faultDescription">
            A description to include in the fault telemetry event when <paramref name="task" /> faults.
            This value is not put in a bucket parameter, but it is in the ErrorInformation.txt file in the
            Cab file sent to Watson, and in the AI event.
            If specified, this value is used as part of the message (second argument) to <see cref="M:Microsoft.VisualStudio.Shell.ActivityLog.TryLogError(System.String,System.String)" />.
            </param>
            <param name="joinableTaskFactory">The joinable task factory to use for creating the forget task.</param>
            <param name="fileOnlyIf">
            An optional exception filter that must return <c>true</c> for the exception to be reported to the VS activity log and fault telemetry.
            </param>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ApplicationDataFolder.LocalSettings">
            <summary>
            Folder that Visual Studio uses for storing the local files specific to user. 
            Example: C:\Users\&lt;user name&gt;\AppData\Local\Microsoft\VisualStudio\&lt;VS version specifier&gt;
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ApplicationDataFolder.RoamingSettings">
            <summary>
            Folder that Visual Studio uses for storing the roaming files specific to user.
            Example: C:\Users&lt;&lt;user name&gt;\AppData\Roaming\Microsoft\VisualStudio&lt;VS version specifier&gt;
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ApplicationDataFolder.Configuration">
            <summary>
            Folder that Visual Studio uses for storing the machine wide files.
            Example: C:\ProgramData\Microsoft\VisualStudio&lt;VS version specifier&gt;
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ApplicationDataFolder.Documents">
            <summary>
            Folder that Visual Studio uses for the user generated files like project, snippets or backup files.
            Example: C:\Users&lt;&lt;user name&gt;\Documents&lt;VS version specifier&gt;
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ApplicationDataFolder.UserExtensions">
            <summary>
            Folder that Visual Studio uses for loading user extensions.
            Example: C:\Users&lt;&lt;user name&gt;\AppData\Local\Microsoft\VisualStudio&lt;&lt;VS version specifier&gt;\Extensions
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ApplicationDataFolder.ApplicationExtensions">
            <summary>
            Folder that Visual Studio specifies for installing per-machine Extensions
            Example: C:\Program Files\Microsoft Visual Studio &lt;VS version&gt;\Common7\IDE\Extensions
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsManager.GetReadOnlySettingsStore(Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsScope)">
            <summary>
            Provides the <see cref="T:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore" /> class for the requested scope which can be used for read-only 
            operations.
            </summary>
            <param name="scope">Requested scope.</param>
            <returns><see cref="T:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore" /> instance that can be used for accessing the scope.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsManager.GetWritableSettingsStore(Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsScope)">
            <summary>
            Provides the <see cref="T:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.IWritableSettingsStore" /> class for the requested scope which can be used both for
            reading and writing.
            </summary>
            <param name="scope">Requested scope.</param>
            <exception cref="T:System.ArgumentException">If the given scope is not a writable one.</exception>
            <returns><see cref="T:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.IWritableSettingsStore" /> instance that can be used for accessing the scope.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsManager.GetApplicationDataFolder(Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ApplicationDataFolder)">
            <summary>
            Returns the folder that Visual Studio uses for storing various cache, backup, template, etc. files
            </summary>
            <param name="folder">Requested folder.</param>        
            <returns>Full path of the requested folder.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsManager.GetCommonExtensionsSearchPaths">
            <summary>
            Returns the list of folders that Visual Studio uses for installing/discovering machine-wide extensions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsManager.InstallPath">
            <summary>
            Returns the path to the install directory (where to find devenv.exe)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore.CollectionExists(System.String)">
            <summary>
            Checks the existance of the collection passed in to this method.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <returns>Returns true if the collection exists and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore.PropertyExists(System.String,System.String)">
            <summary>
            Checks the existance of the property passed in to this method.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>Returns true if the property exists and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore.GetBoolean(System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsType.Int32" /> as boolean.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does 
            not exist.</exception>
            <returns>If the underling integer value for the property is non-zero, it returns true and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore.GetBoolean(System.String,System.String,System.Boolean)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsType.Int32" /> as boolean.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">Value to be returned if the property does not exist.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
            <returns>If the property does not exist, it returns the defaultValue passed in otherwise it returns true if the 
            underling integer value is non-zero and false if it is zero.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore.GetInt32(System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsType.Int32" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does 
            not exist.</exception>
            <returns>Value of the property. If the value was stored as an unsigned integer previously then regular type 
            conversion sematics applies.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore.GetInt32(System.String,System.String,System.Int32)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsType.Int32" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">Value to be returned if the property does not exist.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
            <returns>If the property does not exist, it returns the defaultValue passed in. If the value was stored as an 
            unsigned integer previously then regular type conversion sematics applies.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore.GetUInt32(System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsType.Int32" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does 
            not exist.</exception>
            <returns>Value of the property. If the value was stored as an signed integer previously then regular type 
            conversion sematics applies.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore.GetInt64(System.String,System.String,System.Int64)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsType.Int64" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">Value to be returned if the property does not exist.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
            <returns>If the property does not exist, it returns the defaultValue passed in. If the value was stored as an 
            unsigned long previously then regular type conversion sematics applies.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore.GetPropertyCount(System.String)">
            <summary>
            Returns the number of properties under the given collection.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, method throws this exception.</exception>
            <returns>Number of properties is returned.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore.GetPropertyNames(System.String)">
            <summary>
            Returns the names of properties under the given collection.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, method throws this exception.</exception>
            <returns>Names of properties is returned.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore.GetPropertyNamesAndValues(System.String,Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsType)">
            <summary>
            Returns the names of properties under the given collection and their values.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <param name="type">Interger value of settingstype for return value.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, method throws this exception.</exception>
            <returns>Names of properties and values are returned.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore.GetString(System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsType.String" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does 
            not exist.</exception>
            <returns>Value of the property.</returns> 
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore.GetString(System.String,System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsType.String" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">Value to be returned if the property does not exist.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
            <returns>If the property does not exist, it returns the defaultValue passed in.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore.GetSubCollectionNames(System.String)">
            <summary>
            Returns the names of sub collections under the given collection.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, method throws this exception.</exception>
            <returns>Names of sub collections is returned.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.ISettingsStore2.GetPropertyNamesAndValues(System.String)">
            <summary>
            Returns the names of properties under the given collection and their values.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, method throws this exception.</exception>
            <returns>Names of properties and values are returned.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.IWritableSettingsStore.SetBoolean(System.String,System.String,System.Boolean)">
            <summary>
            Updates the value of the specified property to the given Boolean value while setting its data type to 
            <see cref="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsType.Int32" />. If the previous data type of the property is different, it overwrites it.
            If the property does not exist it creates one.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">New value of the property.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>  
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.IWritableSettingsStore.SetUInt32(System.String,System.String,System.UInt32)">
            <summary>
            Updates the value of the specified property to the given unsigned integer value while setting its data type to 
            <see cref="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsType.Int32" />. If the previous data type of the property is different, it overwrites it.
            If the property does not exist it creates one.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">New value of the property.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.IWritableSettingsStore.SetInt32(System.String,System.String,System.Int32)">
            <summary>
            Updates the value of the specified property to the given integer value while setting its data type to 
            <see cref="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsType.Int32" />. If the previous data type of the property is different, it overwrites it.
            If the property does not exist it creates one.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">New value of the property.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.IWritableSettingsStore.SetInt64(System.String,System.String,System.Int64)">
            <summary>
            Updates the value of the specified property to the given long value while setting its data type to 
            <see cref="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsType.Int64" />. If the previous data type of the property is different, it overwrites it.
            If the property does not exist it creates one.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">New value of the property.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.IWritableSettingsStore.SetString(System.String,System.String,System.String)">
            <summary>
            Updates the value of the specified property to the given string value while setting its data type to 
            <see cref="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsType.String" />. If the previous data type of the property is different, it overwrites it.
            If the property does not exist it creates one.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">New value of the property.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.IWritableSettingsStore.CreateCollection(System.String)">
            <summary>
            Creates the given collection path by creating each nested collection while skipping the ones that already exist. 
            If the full path of collections already exist, the method simply returns.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.IWritableSettingsStore.DeleteCollection(System.String)">
            <summary>
            Deletes the given collection recursively deleting all of the sub collections and properties in it. If the collection 
            does not exist or an empty string ("") is passed then the method returns false.
            </summary>
            <param name="collectionPath">Path of the collection to be deleted.</param>
            <returns>Result of the deletion.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.IWritableSettingsStore.DeleteProperty(System.String,System.String)">
            <summary>         
            Deletes the given property from the collection. If the property or the collection does not exist then the method 
            returns false.
            </summary>
            <param name="collectionPath">Collection that contains the property to be deleted.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>Result of the deletion.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsScope.Configuration">
            <summary>
            Denotes the installation specific configuration scope. This scope is read-only to the users.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.SettingsStorage.SettingsScope.UserSettings">
            <summary>
            Denotes the user configurable user settings scope.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.AutoUpdateProgress">
            <summary>
            This enum encapsulates the auto-update progress of an individual extension
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.AutoUpdateProgress.NotStarted">
            <summary>
            Auto-update not started yet.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.AutoUpdateProgress.Downloading">
            <summary>
            Downloading update.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.AutoUpdateProgress.Downloaded">
            <summary>
            Update downloaded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.AutoUpdateProgress.Installing">
            <summary>
            Installing update.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.AutoUpdateProgress.Installed">
            <summary>
            Update installed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.AutoUpdateProgress.DownloadCancelled">
            <summary>
            Download is cancelled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.AutoUpdateProgress.DownloadFailed">
            <summary>
            Download failed with exception.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.AutoUpdateProgress.InstallCancelled">
            <summary>
            Installation is cancalled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.AutoUpdateProgress.InstallFailed">
            <summary>
            Installation failed with exception.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.AutoUpdateProgress.InstallCancelledPrerequisitesMissing">
            <summary>
            Installation is cancelled due to prerequisites that are not installed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.AutoUpdateProgress.InstallCancelledPrerequisitesUnsatisfiable">
            <summary>
            Installation is cancelled due to prerequisites that cannot be satisfied.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.AutoUpdateState">
            <summary>
            Auto-update state of an installed extension
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.AutoUpdateState.Disabled">
            <summary>
            Auto-update of installed extension is disabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.AutoUpdateState.MinValue">
            <summary>
            Min value of AutoUpdateState.
            </summary>
            <remarks>This is used to determine the lower bound of value range of AutoUpdateState.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.AutoUpdateState.Enabled">
            <summary>
            Auto-update of installed extension is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.AutoUpdateState.NotApplicable">
            <summary>
            Unlike <see cref="F:Microsoft.VisualStudio.ExtensionManager.AutoUpdateState.Disabled" />, used to indicate that the installed extension does not support auto-updating.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.AutoUpdateState.MaxValue">
            <summary>
            Max value of AutoUpdateState.
            </summary>
            <remarks>This is used to determine the upper bound of value range of AutoUpdateState.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.AutoUpdateState.Unknown">
            <summary>
            Last auto-update state get attempt resulted in an error to this extension.
            </summary>
            <remarks>Extension in this state won't get auto-updated during this Visual Studio session. Next time when Visual Studio starts it will try to get the auto-update again for this extension.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.CannotUninstallOrphanedComponentsException">
            <summary>
            Exception thrown when we detect that an orphan pack component 
            cannot be uninstalled.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.CorruptInstanceException">
            <summary>
            Exception thrown when a DependencyGraphConstructionException is caught from the setup engine.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.DirectoryExistsException">
            <summary>
            Exception thrown when attempting to install an Extension SDK into an
            existing directory.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.EnabledState">
            <summary>
            Enabled state of an installed extension.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.EnabledState.Disabled">
            <summary>
            The extension is disabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.EnabledState.Enabled">
            <summary>
            The extension is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.EnabledState.PendingDisable">
            <summary>
            The command was given to disable the extension, but the change requires a restart of Visual Studio.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.EnabledState.PendingEnable">
            <summary>
            The command was given to enable the extension, but the change requires a restart of Visual Studio.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.EnabledState.PermanentDisable">
            <summary>
            Installed extension is permanently disabled due to a compatibility issue with the current Visual Studio environment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.EnabledState.Unknown">
            <summary>
            If we don't know the state.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineContractExtensionMethods.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Adds a key/value pair to the dictionary if the key does not already exist.
            </summary>
            <typeparam name="K">the type of key</typeparam>
            <typeparam name="V">the type of the value</typeparam>
            <param name="dictionary">the dictionary</param>
            <param name="key">the key</param>
            <param name="valueFactory">the function used to generate a value for a key</param>
            <returns>The value for the key. This will be either the existing value for the key if the key is already in the 
            dictionary, or the new value for the key as returned by valueFactory if the key was not in the dictionary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineContractExtensionMethods.Walk``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Performs a recursive traversal of a acyclic graph from the given root node.
            </summary>
            <param name="rootNode">the root node</param>
            <param name="childNodeSelector">function to select child nodes from parent node</param>
            <returns>the root node and all its descendants</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineContractExtensionMethods.IsExtensionSdk(Microsoft.VisualStudio.ExtensionManager.IExtension)">
            <summary>
            Indicates if the given extension is an Extension SDK.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineContractExtensionMethods.IsPlatformSdk(Microsoft.VisualStudio.ExtensionManager.IExtension)">
            <summary>
            Indicates if the given extension is a Platform SDK.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineContractExtensionMethods.GetInstalledExtension(Microsoft.VisualStudio.ExtensionManager.IExtensionEngine,System.String)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.ExtensionManager.IInstalledExtension" /> whose identifier is <paramref name="identifier" />.
            </summary>
            <exception cref="T:Microsoft.VisualStudio.ExtensionManager.NotInstalledException">Thrown when no extension with the identifier <paramref name="identifier" /> is installed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineContractExtensionMethods.NormalizedEquals(System.Version,System.Version)">
            <summary>
            Indicates if, after normalization, the two given versions are equal.
            Unset values in the input versions will be taken to be zero.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineContractExtensionMethods.IsVSCodeExtension(Microsoft.VisualStudio.ExtensionManager.IExtension)">
            <summary>
            Indicates if the given extension is actually a VS Code extension.
            </summary>
            <param name="extension">Given extension</param>
            <returns>Whether or not the given extension is a VS Code extension.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="extension.targets.targets" /> is null.</exception>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.Default">
            <summary>
            Indicates default mode of operation for the Extension Manager.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.SafeMode">
            <summary>
            Indicates that the Extension Manager should run in safe mode. User extensions are disabled in safe mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.DoNotLoadUserExtensions">
            <summary>
            Indicates that user extensions were _not_ loaded by the AppId and should not be loaded by ExtensionManager.
            We are using a negative so that the default is that user extensions are loaded, and only if this mode is
            specifically set, user extensions will not be loaded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.ScanAlways">
            <summary>
            Indicates that Extension Manager should always scan for extensions.
            </summary>
            <remarks>
            Consider using the <see cref="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.SafeScanAlways" /> as this flag <see cref="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.ScanAlways" /> will be deprecated in future releases.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.DoNotScanSdkDirectories">
            <summary>
            Indicates that Extension Manager should not scan SDK directories for extensions.
            We are using a negative so that the default is that SDK directories are scanned.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.RestrictedMode">
            <summary>
            Similar to SafeMode, adding an extra flag for clarity.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.SkipMessagePack">
            <summary>
            Indicates if we should skip using messagepack.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.SafeScanAlways">
             <summary>
             Indicates that the Extension Manager should always scan for extensions but update the timestamp only if new or modified extensions are found.
             </summary>
             <remarks>
            The flag, <see cref="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.SafeScanAlways" />, performs a similar task to <see cref="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.ScanAlways" />. but with an important difference: it does not update the timestamp every time. Instead, it updates the timestamp only when detecting new extensions or updates to existing ones.
            This flag <see cref="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.SafeScanAlways" /> is suitable for scenarios where timestamp updates are optional and requires only upon extension changes.
             This is called 'IsUpdateTimestampOnChangeDetectionMode'.
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineModeExtensions.IsDefaultMode(Microsoft.VisualStudio.ExtensionManager.EngineMode)">
            <summary>
            Returns True if the <see cref="T:Microsoft.VisualStudio.ExtensionManager.EngineMode" /> is Default.
            </summary>
            <remarks>
            All <see cref="T:Microsoft.VisualStudio.ExtensionManager.EngineMode" /> is set to <see cref="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.Default" /> by default because the <see cref="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.Default" /> is set to `0`. Use the <see cref="M:Microsoft.VisualStudio.ExtensionManager.EngineModeExtensions.IsStrictlyDefaultMode(Microsoft.VisualStudio.ExtensionManager.EngineMode)" /> method to check if the mode is strictly set to Default.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineModeExtensions.IsStrictlyDefaultMode(Microsoft.VisualStudio.ExtensionManager.EngineMode)">
            <summary>
            Returns True if the <see cref="T:Microsoft.VisualStudio.ExtensionManager.EngineMode" /> is Default.
            </summary>
            <remarks>
            Since the <see cref="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.Default" /> is `0`, this method is equivalent to `mode == EngineMode.Default`.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineModeExtensions.IsDoNotScanSdkDirectoriesMode(Microsoft.VisualStudio.ExtensionManager.EngineMode)">
            <summary>
            Returns True if the <see cref="T:Microsoft.VisualStudio.ExtensionManager.EngineMode" /> is DoNotScanSdkDirectories.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineModeExtensions.IsUpdateTimestampOnChangeDetectionMode(Microsoft.VisualStudio.ExtensionManager.EngineMode)">
            <summary>
            Returns True if the <see cref="T:Microsoft.VisualStudio.ExtensionManager.EngineMode" /> is SafeScanAlways.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineModeExtensions.IsScanAlwaysMode(Microsoft.VisualStudio.ExtensionManager.EngineMode)">
            <summary>
            Returns True if the <see cref="T:Microsoft.VisualStudio.ExtensionManager.EngineMode" /> is ScanAlways.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineModeExtensions.IsNotScanAlwaysMode(Microsoft.VisualStudio.ExtensionManager.EngineMode)">
            <summary>
            Returns True if the <see cref="T:Microsoft.VisualStudio.ExtensionManager.EngineMode" /> is not ScanAlways.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineModeExtensions.IsStrictlyUpdateTimestampOnChangeDetectionMode(Microsoft.VisualStudio.ExtensionManager.EngineMode,Microsoft.VisualStudio.ExtensionManager.ExtensionEngineOptions)">
            <summary>
            Returns True if the <see cref="T:Microsoft.VisualStudio.ExtensionManager.EngineMode" /> is strictly set to UpdateTimestampOnChangeDetectionMode.
            </summary>
            <param name="mode">The <see cref="T:Microsoft.VisualStudio.ExtensionManager.EngineMode" /> to check.</param>
            <param name="extensionEngineOptions">The <see cref="T:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineOptions" /> to consider for additional conditions.</param>
            <returns>True if the <see cref="T:Microsoft.VisualStudio.ExtensionManager.EngineMode" /> is strictly set to UpdateTimestampOnChangeDetectionMode; otherwise, False.</returns>
            <remarks>
            Returns False, if <see cref="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.Default" /> mode or <see cref="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.DoNotScanSdkDirectories" /> is set.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.EngineModeExtensions.IsStrictlyUpdateTimestampOnChangeDetectionModeWithDefaultMode(Microsoft.VisualStudio.ExtensionManager.EngineMode,Microsoft.VisualStudio.ExtensionManager.ExtensionEngineOptions)">
            <summary>
            Returns True if the <see cref="T:Microsoft.VisualStudio.ExtensionManager.EngineMode" /> is strictly set to UpdateTimestampOnChangeDetectionMode.
            </summary>
            <param name="mode">The <see cref="T:Microsoft.VisualStudio.ExtensionManager.EngineMode" /> to check.</param>
            <param name="extensionEngineOptions">The <see cref="T:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineOptions" /> to consider for additional conditions.</param>
            <returns>True if the <see cref="T:Microsoft.VisualStudio.ExtensionManager.EngineMode" /> is strictly set to UpdateTimestampOnChangeDetectionMode; otherwise, False.</returns>
            <remarks>
            Returns False, if only <see cref="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.Default" /> mode is set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionChangedState.WasExtensionModified">
            <summary>
            True if the extension was modified or added.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionChangedState.UpdateReasons">
            <summary>
            The reason for the update or addition. <see cref="F:Microsoft.VisualStudio.ExtensionManager.ExtensionChangedState.UpdateReason.None" /> if the extension was not modified or added.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.ExtensionContentTypes">
            <summary>
            Constants for the well-known extension content type names
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionContentTypes.GetContentType(System.String)">
            <summary>
            Transforms a content type from its V1 format to the V2 format.
            If no matching V1 format is detected, will return the same string it receives.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.ExtensionContentTypes.GetExtensionType(System.String)">
            <summary>
            Get <see cref="T:Microsoft.VisualStudio.ExtensionManager.ExtensionTypeCode" /> <see cref="T:System.String" /> from the requested <paramref name="type" />.
            <para>
            Compare <paramref name="type" /> using <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> rules and ignoring the case of the <paramref name="type" /> being compared.
            </para>
            </summary>
            <param name="type"></param>
            <returns>Returns the <see cref="T:Microsoft.VisualStudio.ExtensionManager.ExtensionTypeCode" /> <see cref="T:System.String" /> if found, otherwise <paramref name="type" />.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.VisualStudio.ExtensionManager.ExtensionDigitalSignature.Exception" -->
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineOptions.EngineMode">
            <summary>
            This mode is the mode in which the extension engine determines the best <see cref="P:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineOptions.EngineMode" /> to execute based on settings and feature flag status
            It may not be the same as the <see cref="P:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineOptions.RequestedEngineMode" />.
            </summary>
            <remarks>
            The <see cref="P:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineOptions.EngineMode" /> ultimately chosen by the extension engine may differ from this requested mode
            due to specific settings.
            This can be set by the client to indicate the mode in which the extension engine should try to execute.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineOptions.UseUpdateOnDetectionMode">
            <summary>
            Indicates whether the <see cref="N:Microsoft.VisualStudio.ExtensionEngine" /> should use the update on detection mode.
            Must be True when the <see cref="N:Microsoft.VisualStudio.ExtensionEngine" /> needs to use Mode <see cref="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.SafeScanAlways" />. 
            If this is false, the <see cref="N:Microsoft.VisualStudio.ExtensionEngine" /> will use Mode <see cref="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.SafeMode" /> even when the mode is defined as <see cref="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.SafeScanAlways" />.
            For other modes, the <see cref="N:Microsoft.VisualStudio.ExtensionEngine" /> will use the mode as defined.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineOptions.RequestedEngineMode">
            <summary>
            This mode is the mode in which the extension engine was initially requested to be initialized.
            It may not be the same as the actual <see cref="P:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineOptions.EngineMode" /> used by the extension engine,
            as the engine determines the best mode to execute based on settings and feature flag status.
            </summary>
            <remarks>
            The <see cref="P:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineOptions.EngineMode" /> ultimately chosen by the extension engine may differ from this requested mode
            due to specific settings.
            This should not be set by the client, but rather by the extension engine.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineOptions.IsExtensionResetMode">
            <summary>
            Indicates whether the <see cref="N:Microsoft.VisualStudio.ExtensionEngine" /> should reset the extension settings to the default state.
            </summary>
            <remarks>
            This can be used when the '<see cref="N:Microsoft.VisualStudio.ExtensionEngine" /> is in <see cref="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.ScanAlways" /> or <see cref="F:Microsoft.VisualStudio.ExtensionManager.EngineMode.SafeScanAlways" /> mode' and the <see cref="T:Microsoft.VisualStudio.ExtensionManager.EngineHostId" /> is set to <see cref="F:Microsoft.VisualStudio.ExtensionManager.EngineHostId.VisualStudio" />.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineOptions.IsVisualStudioHost">
            <summary>
            Indicates whether the current host is Visual Studio.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineOptions.Default">
            <summary>
            Returns the default <see cref="T:Microsoft.VisualStudio.ExtensionManager.ExtensionEngineOptions" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.ExtensionInstallData.InstallDataSavePath">
            <summary>
            Static field for storing path where Extension install data should be stored.
            This should ONLY be set in VSIXInstaller
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Def.Settings.ExtensionsApiUsage">
            <summary>
            Describes the usage of APIs by many extensions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Def.Settings.ExtensionsApiUsage.Extensions">
            <summary>
            Gets the report on APIs referenced by extensions and assemblies.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Def.Settings.ExtensionsApiUsage.ApiUsageScopes">
            <summary>
            Gets a list of API sets for which references are recorded.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Def.Settings.ExtensionApiUsage">
            <summary>
            Describes the usage of APIs by an extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Def.Settings.ExtensionApiUsage.Moniker">
            <summary>
            Gets the extension ID and version.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Def.Settings.ExtensionApiUsage.Assemblies">
            <summary>
            Gets the DocIDs of APIs referenced by an extension, indexed by assembly name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Def.Settings.ExtensionApiUsage.ScanCost">
            <summary>
            Gets the cost of scanning the extension.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Def.Settings.AssemblyApiUsage">
            <summary>
            Describes the usage of APIs by an assembly.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Def.Settings.AssemblyApiUsage.AssemblyName">
            <summary>
            Gets the simple assembly name (e.g. "Newtonsoft.Json").
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Def.Settings.AssemblyApiUsage.AssemblyVersion">
            <summary>
            Gets the assembly version.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Def.Settings.AssemblyApiUsage.AssemblyFileVersion">
            <summary>
            Gets the assembly file version (typically more precise than <see cref="P:Microsoft.VisualStudio.ExtensionManager.Def.Settings.AssemblyApiUsage.AssemblyVersion" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Def.Settings.AssemblyApiUsage.FileSize">
            <summary>
            Gets the size of the assembly in bytes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Def.Settings.AssemblyApiUsage.PublicKeyToken">
            <summary>
            Gets the public key token of the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Def.Settings.AssemblyApiUsage.DocIds">
            <summary>
            Gets the DocIDs of the APIs referenced by the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Def.Settings.AssemblyApiUsage.ScanFailure">
            <summary>
            Gets the exception thrown while scanning the assembly, if any.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionSettingsList">
            <summary>
            Interface that extends <see cref="T:Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionList" /> with extension cache methods.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionSettingsList.CanBypassScan(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Uses the timestamps and cache version data to determine if we can skip a scan
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionSettingsList.EnsureCacheVersionUpToDate(Microsoft.VisualStudio.ExtensionManager.Impl.Settings.CacheMode)">
            <summary>
            Used to guarantee the stored cache version is accurate
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionSettingsList.GetCacheLastUpdated(System.Boolean)">
            <summary>
            Acquires the latest cache update timestamp from the registry.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the return timestamp cannot be parsed as a valid DateTime value.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionSettingsList.IsCacheVersionCompatible">
            <summary>
            Version is valid as long as the format is correct with a number after the colon is, a number.
            This is because we allow ONLY backwards compatible registry schema updates such as adding a new property.
            We NEVER allow a rename or deletion of an in-use property. (the deletions from v1-&gt;v2 were purely dead code and done during preview to ensure we had clean caches on release)
            Additionally, missing properties are treated as empty and should result in a rescan to ensure things get updated.
            If we really need to break compatibility we can simply change the format.
            Here are what the versions mean as far as the feature set requiring a bump:
            1 - Initial release of registry caching, 17.2 (many properties)
            2 - Updated release of registry caching with many performance improvements, 17.2 (reduction of properties)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionSettingsList.IsMessagePackRecreated">
            <summary>
            Indicates if the message pack file has been recreated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionSettingsList.GetExtensionContainingPackageGuid(System.Guid)">
            <summary>
            Gets an extension with a matching package GUID.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionSettingsList.GetExtensionFromInstallPath(System.String)" -->
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionSettingsList.GetExtensionPacks(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Gets an enumerable of all the installed extensions that are listed as a packed extension
            component within the provided extension.
            </summary>
            <param name="extension">
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing only installed extensions
            that are part of the provided extension's packed components.
            </param>
            <remarks>
            If an extension is listed as a pack component but isn't installed, it gets skipped.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionSettingsList.GetExtensions(System.Func{Microsoft.VisualStudio.ExtensionManager.EnabledState,System.Boolean},System.String,System.Boolean)">
            <summary>
            Gets extensions containing the given asset type. Optionally, bypassing loading other
            asset types included in the extension.
            </summary>
            <param name="enabledFilter">filters the extensions enabled state</param>
            <param name="assetTypeName">the asset type to select for</param>
            <param name="includeOtherExtensionAssetTypes">
            false, if other extension types should not be loaded into extension object
            </param>
            <returns>the list of extensions containing the given asset type</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionSettingsList.GetLoadableAndEnableExtensionsFromScanResultAsync(Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ScanResult,System.Threading.CancellationToken,Microsoft.VisualStudio.ExtensionManager.Impl.Settings.CacheMode,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Attempts to load the given extensions and ensures per-machine extensions are enabled.
            </summary>
            <param name="scanResult"><see cref="T:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ScanResult" /> containing the found extensions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionSettingsList.LoadExtensionsFromCacheAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken,System.Boolean,Microsoft.VisualStudio.ExtensionManager.Impl.Settings.CacheMode)">
            <summary>
            Loads the extensions from the cache into the settings cache object and InstalledExtensionList.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.Def.Settings.IInstalledExtensionSettingsList.ScanInstalledExtensionsAsync(System.Boolean,System.Boolean,Microsoft.VisualStudio.ExtensionManager.ITelemetryLogger,System.Object)">
            <summary>
            Scans either per user and per machine extensions or sdk extensions.
            </summary>
            <returns><see cref="T:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ScanResult" /> with a list of found extensions.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ExtensionManagerConstants.SettingsStoreRoot">
            NOTE: This is accessed via Reflection from the VSSDK build tasks
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ExtensionManagerConstants.ExtensionsChangedKey">
            NOTE: This is accessed via Reflection from the VSSDK build tasks
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ExtensionManagerConstants.PendingDeletionsCollection">
            NOTE: This is accessed via Reflection from the VSSDK build tasks
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ExtensionManagerConstants.DefaultCategoriesLevelSpecifier">
            <summary>
            Indicates that the default(truncated) list of categories should be returned by
            IVsExtensionRepository.GetCategoryTree
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ExtensionManagerConstants.ExtendedCategoriesLevelSpecifier">
            <summary>
            Indicates that the full list of categories should be returned by
            IVsExtensionRepository.GetCategoryTree
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.ExtensionTelemetryInfoExtended">
            <summary>
            This class is used to log the extensions that a user has installed on their instance of VS and is used as a ComplexTelemetryProperty so we can send one event for all installed extensions
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.ExtensionTypeCode">
            <summary>
            Constants for the well-known extension types
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.FilesInUseException">
            <summary>
            Exception thrown when we attempt to uninstall an Extension SDK and we find
            that files are in use.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.HostProperties">
            <summary>
            Host version and edition information as well as corresponding product architecture and additionalProperties if provided.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IClientEnabledSettings.IsClientMode">
            <summary>
            True if the EngineHost is currently running in client mode; otherwise false
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IClientEnabledSettings.ClientAppPath">
            <summary>
            The EngineHost's AppDataFolder for client mode; undefined if not running in client mode
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IClientEnabledSettings.SettingsManager">
            <summary>
            Access client settings storage used by the engine host.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.ICommonExtensionInfo">
            <summary>
            This interface servers as a lowest common denominator of extension information. Originally
            extensions would implement the IVsExtension interface but due to the migration of
            extensions from ExtensionManager to ExtensionEngine a new interface had to be created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.SettingsManager">
            <summary>
            Access settings storage used by the engine host.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.AutoUpdateManager">
            <summary>
            Exposes ability to query and set auto-update state of extensions in the given host.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.TelemetryLogger">
            <summary>
            Logs telemetry to whatever stream/service the host uses.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.Logger">
            <summary>
            Logs debugging/troubleshooting data to whatever reporting mechanism the host uses.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.AsyncServiceProvider">
            <summary>
            Used for asynchronous service retrieval.
            At least one of this or ServiceProvider should be non-null in all cases except when running under SDK build tasks.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.ServiceProvider">
            <summary>
            Used for synchronous service retrieval.
            At least one of this or AsyncServiceProvider should be non-null in all cases except when running under SDK build tasks.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.PreferredCulture">
            <summary>
            The preferred culture to operate in.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.RootFolder">
            <summary>
            The root folder of the installation the host is working with.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.InstallDir">
            <summary>
            The install directory of the installation the host is working with.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.ShellFolder">
            <summary>
            The shell folder of the installation the host is working with.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.ProductName">
            <summary>
            The product name of the installation the host is working with.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.JoinableTaskFactory">
            <summary>
            A JoinableTaskFactory instance used to schedule work and switch the main thread. May be null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.ShouldDeletePendingUninstalls">
            <summary>
            Indicates if this host would like us to delete pending uninstalls or not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.ShouldMarkPendingUninstalls">
            <summary>
            Indicates if this host wants .pkgdef files marked with .deleteme
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.HostId">
            <summary>
            Identifier of the specific host we are running in.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.HostProperties">
            <summary>
            The property of host we are running in: 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.AppName">
            <summary>
            Product name of the current host
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.IsRemoteEnvironment">
            <summary>
            Gets Remote Environment Status
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IEngineHost.RunUIThreadBackgroundPriority(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs the given action asynchronously on the UI thread with background priority for scheduling
            </summary>
            <param name="func">The work to run</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IEngineHost.WaitOnHostTask(System.Threading.Tasks.Task)">
            <summary>
            Waits on a <see cref="T:System.Threading.Tasks.Task" /> returned by <see cref="M:Microsoft.VisualStudio.ExtensionManager.IEngineHost.RunUIThreadBackgroundPriority(System.Func{System.Threading.Tasks.Task})" /> in a way that will
            avoid deadlocking.
            </summary>
            <param name="toWait">The <see cref="T:System.Threading.Tasks.Task" /> to wait on.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IEngineHost.OnBeforeInstall(Microsoft.VisualStudio.ExtensionManager.IInstallableExtension)">
            <summary>
            Called before every extension install to give engine host a chance to do any work it needs to do.
            </summary>
            <param name="extension">The extension to install</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IEngineHost.OnBeforeInstall(Microsoft.VisualStudio.ExtensionManager.IInstallableExtension,System.Boolean)">
            <summary>
            Called before every extension install to give engine host a chance to do any work it needs to do.
            </summary>
            <param name="extension">The extension to install</param>
            <param name="perMachine">Whether the extension should be forced to install per machine.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IEngineHost.DisablePerMachineExtension(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Called to allow the host to do anything it needs to do to disable a per-machine extension
            </summary>
            <param name="extension">The extension to disable</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IEngineHost.EnablePerMachineExtension(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Called to allow the host to do anything it needs to do to enable a per-machine extension
            </summary>
            <param name="extension">The extension to enable</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IEngineHost.LocationIsExcluded(System.String)">
            <summary>
            Indicates if the given path is excluded from loading extensions, MEF parts, etc...
            </summary>
            <param name="path">The path to check</param>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.ExcludedLocations">
            <summary>
            Paths for any locations excluded from loading extensions, MEF parts, etc...
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IEngineHost.ClientEnabledSettings">
            <summary>
            ClientEnabledSetting provides information related to client environment.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.IExtension">
            <summary>
            Contains all of the metadata contained in a Package manifest.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtension.AdditionalElements">
            <summary>
            Specifies additional structured data for the extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtension.Content">
            <summary>
            The Content contained in an extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtension.Header">
            <summary>
            Contains the extensions top-level metadata.
            </summary>
            <remarks>This is called via Reflection from the VSSDK build tasks</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtension.InstallerInformation">
            <summary>
            The information required for installation operations.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtension.LocalizedAdditionalElements">
            <summary>
            Specifies additional structured localized data for the extension from language pack manifest.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtension.PackageType">
            <summary>
            Gets the version of extension package
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtension.PackedExtensionsVsixIDs">
            <summary>
            A collection of the extension's packed extensions vsix ID's
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtension.References">
            <summary>
            A collection of the extension's dependencies.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtension.SchemaVersion">
            <summary>
            The version of the extension manifest schema that the extension conforms to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtension.Targets">
            <summary>
            The installation targets of an extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtension.Type">
            <summary>
            Computes the extension type based on its contents.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtension.IsProductSupported(System.String,System.Version,Microsoft.VisualStudio.ExtensionManager.ProductArchitecture,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Determines whether the extension may be installed in a given version of the product with
            the given identifier.
            </summary>
            <param name="productId">The product identifier.</param>
            <param name="version">The product version.</param>
            <param name="productArch">The product architecture.</param>
            <param name="additionalProperties">
            Additional properties of the product. Property values are compared ignoring case.
            </param>
            <returns>True if the extension may be installed. False otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtension.CanHotload">
            <summary>
            Determines if an extension can be hot loaded.
            </summary>
            <returns>True if hot loadable, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.IExtensionContent">
            <summary>
            Represents the 'Content' metadata of a VSIX manifest.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionContent.ContentTypeName">
            <summary>
            The type of the content.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionContent.Attributes">
            <summary>
            The attributes of the content
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionContent.RelativePath">
            <summary>
            A path to the content that is relative to the root of the extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionContent.AdditionalElements">
            <summary>
            Specifies additional structured metadata for the asset.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine">
            <summary>
            Interface used to manage and search for installed extensions.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.InstallCompleted">
            <summary>
            Event fired when an InstallAsync completes, is cancelled, or has an error.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.InstallProgressChanged">
            <summary>
            Event fired as progress is made after starting an Install with InstallAsync.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.ExtensionHotloadComplete">
            <summary>
            Event fired when an extension has been hotloaded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.ApplicationExtensionsRoot">
            <summary>
            Root of file system location where per-machine extensions are installed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.CurrentUserExtensionsRoot">
            <summary>
            Root of file system location where per-user extensions are installed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.DidLoadUserExtensions">
            <summary>
            Gets or sets whether we loaded user extensions in this session
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.InstalledExtensions">
            <summary>
            Retrieves the list of installed extensions from the cache.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.UninstalledRestartRequiredExtensionsCount">
            <summary>
            Count of how many restart required extensions were uninstalled
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.BatchEngineInstall(System.Collections.Generic.List{Microsoft.VisualStudio.ExtensionManager.IInstallableExtension},Microsoft.VisualStudio.ExtensionManager.InstallFlags,System.Version)">
            <summary>
            To batch install VSIX v3 packages
            </summary>
            <param name="installableExtension">
            The extension to be installed. This must be an extension that was created from a VSIX package.
            </param>
            <param name="installFlags">The flags to use for this install.</param>
            <param name="targetVsVersion">The version of Visual Studio that the install is targeting</param>
            <returns>List of successfully installed extensions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.CommitChanges(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ExtensionManager.IInstalledExtension},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ExtensionManager.IInstalledExtension},System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Boolean}},System.Version,Microsoft.VisualStudio.ExtensionManager.InstallFlags)">
            <summary>
            Commit a set of changes to the engine.
            </summary>        
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.CommitExternalInstall(System.String,System.Boolean)">
            <summary>
            Does bookkeeping for an extension that was installed externally
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.CommitExternalUninstall(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Does bookkeeping for an extension that was uninstalled externally
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.Disable(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Disables the given extension
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.PermanentDisable(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Disables the given extension
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.Downgrade(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,Microsoft.VisualStudio.ExtensionManager.InstallFlags)">
            <summary>
            Downgrades <paramref name="extension" /> to lower version. Should only target VS version 15.0+
            </summary>
            <param name="extension">The extension to downgrade</param>
            <param name="installFlags">The flags to use for this install.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.Enable(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Enables the given extension
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.FindMissingReferences(Microsoft.VisualStudio.ExtensionManager.IExtension)">
            <summary>
            Finds any missing references for the given extension
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.GetExtensionPacks(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Gets extension packs that included this extension
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.GetImmediateDependants(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Gets immediate dependents for the given extension
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.GetLastExtensionsChangedTimestamp">
            <summary>
            Gets the last UTC timestamp (as a FILETIME structure) from either the
            ConfigurationChanged value in the UserSettings key and from the ExtensionsChanged value
            in the ExtensionManager settings root
            </summary>
            <returns>the latest stored UTC timestamp</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.GetPrerequisites(Microsoft.VisualStudio.ExtensionManager.IInstallableExtension,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Setup.IPackage}@,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Setup.IPackage}@,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ExtensionManager.IExtensionReference}@)">
            <summary>
            Get the list of setup prerequisites for the extension.
            </summary>
            <param name="extension">Extension from which to get setup prerequisite information.</param>
            <param name="installedPackages">List of packages that were resolved and are installed.</param>
            <param name="installablePackages">List of packages that were resolved and are not installed.</param>
            <param name="unresolveReferences">List of references that could not be resolved.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.Install(Microsoft.VisualStudio.ExtensionManager.IInstallableExtension,Microsoft.VisualStudio.ExtensionManager.InstallFlags,System.Version)">
            <summary>
            Installs an extension to the ExtensionsRoot directory. Installing an extension through
            this method will automatically enable the extension as well. This action may require a
            restart of Visual Studio for an extension to become loadable. Upon a successful install,
            this method will set the InstallPath property of the IExtension object.
            </summary>
            <param name="installableExtension">
            The extension to be installed. This must be an extension that was created from a VSIX package.
            </param>
            <param name="installFlags">The flags to use for this install.</param>
            <param name="targetVsVersion">The version of Visual Studio that the install is targeting</param>
            <returns>bool indicating if a restart is required.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.InstallAsync(Microsoft.VisualStudio.ExtensionManager.IInstallableExtension,Microsoft.VisualStudio.ExtensionManager.InstallFlags,System.Object)">
            <summary>
            Asynchronously installs an extension to the ExtensionsRoot directory. Installs invoked
            through this method may be canceled by passing the userState object to the
            InstallAsyncCancel method.
            </summary>
            <param name="extension">
            The extension to be installed. This must be an extension that was created from a VSIX package.
            </param>
            <param name="installFlags">The flags to use for this install.</param>
            <param name="userState">
            An task ID that may be used to track multiple invocations of this method in event handlers.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.InstallAsyncCancel(System.Object)">
            <summary>
            Cancels a pending asynchronous install operation.
            </summary>
            <param name="userState">
            A task ID denoting which invocation of Install() should be canceled.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.IsDowngradable(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Determines whether or not <paramref name="extension" /> can be downgraded to a lower version
            </summary>
            <param name="extension">The extension to downgrade</param>
            <returns>True if <paramref name="extension" /> can be downgraded, false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.RemoveOrphanedComponents(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Removes orphaned components of the given parent extension
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.RevertUninstall(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension)">
            <summary>
            Reverts an uninstalled extension back to an installed state. This API will only succeed
            for extensions that have been Uninstalled through the Uninstall API. Furthermore, this
            API must be called before the Extension Manager is restarted since pending uninstalls
            are cleaned up during initialization. Otherwise, a NotPendingDeletionException will be thrown.
            </summary>
            <param name="extension">An extension that was passed to the Uninstall API.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.SchedulePendingUninstallDeletion">
            <summary>
            Explicitly schedule the deletion of pending uninstalls and return a task representing
            that work.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the removal of any pending uninstalls.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.TryGetExtensionVersionFromCatalog(System.String,System.Version@)">
            <summary>
            Try to get the version of an extension from the installer catalog. This version would
            exist if the extension is an in-product extension and was updated to higher version than
            what is in the installer catalog.json
            </summary>
            <param name="identifier">The identifier of the extension</param>
            <param name="version">The version of the extension that exists in the catalog</param>
            <returns>True if the extension has a catalog version, false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.Uninstall(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,Microsoft.VisualStudio.ExtensionManager.InstallFlags,System.Version)">
            <summary>
            Uninstalls an extension from the ExtensionsRoot directory. A restart of Visual Studio is
            required for the uninstall to complete.
            </summary>
            <param name="extension">The extension to be uninstalled.</param>
            <param name="installFlags">The flags to use for this install.</param>
            <param name="targetedVSVersion">The version of VS that the uninstall is targeting</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.UpdateLastExtensionsChange(System.Boolean)">
            <summary>
            Updates the last extensions changed timestamp with DateTime.Now
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.UpdateLastExtensionsChangedTimestamp(System.Boolean,System.Nullable{System.DateTime})">
            <summary>
            Updates the last extensions changed timestamp with the given time (or DateTime.Now if ommited)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.ValidReferenceSpecialCase(Microsoft.VisualStudio.ExtensionManager.IExtensionReference)">
            <summary>
            Validate if a reference is in a valid special case so we can claim it is installed.
            </summary>
            <returns>True is the reference matches a special case.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.CreateInstallableExtension(System.String)">
            <summary>
            Takes a vsix and parses it into an InstallableExtension.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.GetLatestSchemaVersion(Microsoft.VisualStudio.ExtensionManager.IInstallableExtension)">
            <summary>
            Given an IInstallableExtension, we determine the latest schema version supported.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.RaiseExtensionHotloadCompleted(Microsoft.VisualStudio.ExtensionManager.IInstalledExtension,Microsoft.VisualStudio.ExtensionManager.InstallState)">
            <summary>
            Instructs called when we are ready to notify watchers of a new hotloaded extension.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.ForceHotloadRefreshAsync(System.Threading.CancellationToken)">
            <summary>
            Forces a refresh of the hotload registration files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionEngine.GetInstalledExtensionsAsync(System.Threading.CancellationToken)">
            <summary>
            Get installed extensions asynchronously
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader">
            <summary>
            Represents all of the metadata contained in a Package manifest's 'Metadata' node.
            </summary>    
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.Author">
            <summary>
            The individual or company that created the extension.
            </summary>
            <remarks>This is called via Reflection from the VSSDK build tasks</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.Description">
            <summary>
            A description of the extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.LocalizedDescription">
            <summary>
            A description of the extension for the CurrentUICulture, if the corresponding Language Pack is installed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.GettingStartedGuide">
            <summary>
            A location that provides information on using the extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.ReleaseNotes">
            <summary>
            A location that provides information on changes between versions of the extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.ReleaseNotesContent">
            <summary>
            If ReleaseNotes specifies a local path, this represents the contents of the Release Notes. 
            Otherwise, returns an empty byte array.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.ReleaseNotesFormat">
            <summary>
            The data format of ReleaseNotes. Corresponds to a field
            value from System.Windows.DataFormats.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.Identifier">
            <summary>
            A unique value to Identify the extension.
            </summary>
            <remarks>This is called via Reflection from the VSSDK build tasks</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.License">
            <summary>
            A path to a license file in the extension directory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.LicenseFormat">
            <summary>
            The data format of license. Corresponds to a field
            value from System.Windows.DataFormats.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.LicenseClickThrough">
            <summary>
            Denotes whether a EULA dialog must be shown before the extension is installed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.Locale">
            <summary>
            The CultureInfo that corresponds to the LCID listed in the extension manifest.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.MoreInfoUrl">
            <summary>
            A location that provides more information about the extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.Icon">
            <summary>
            Path to an icon file in the extension directory that represents the extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.PreviewImage">
            <summary>
            Path to an image file in the extension directory that contains a screenshot previewing the extension purpose.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.InstalledByMsi">
            <summary>
            Denotes whether the extension was installed via an MSI. Such extensions cannot be uninstalled through the Extension Manager Service
            and must instead be uninstalled through the Windows ARP dialog.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.Name">
            <summary>
            The name of the extension.
            </summary>
            <remarks>This is called via Reflection from the VSSDK build tasks</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.LocalizedName">
            <summary>
            The name of the extension for the CurrentUICulture, if the corresponding Language Pack is installed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.Version">
            <summary>
            The version of the extension.
            </summary>
            <remarks>This is called via Reflection from the VSSDK build tasks</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.VsixManifestVersion">
            <summary>
            The version of the extension.
            </summary>
            <remarks>This value is pulled from the extension.manifest to determine if an extension is nexus compatible or not. </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.SupportedFrameworkVersionRange">
            <summary>
            The version range of the .NET Framework that the extension requires.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.SystemComponent">
            <summary>
            Denotes whether an extension is uninstallable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.AllUsers">
            <summary>
            Denotes that this extension is only installable to a per-machine context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.IsExperimental">
            <summary>
            Denotes whether the extension is experimental. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.GlobalScope">
            <summary>
            Denotes that this extension is not scoped to any particular SKU.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.PartialManifestType">
            <summary>
            Denotes the type of partial manifest contained in the Vsix V3
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.Tags">
            <summary>
            A collection of tags for the extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.Preview">
            <summary>
            Denotes whether the extension is Preview version. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.AdditionalElements">
            <summary>
            Specifies additional structured metadata for the extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.LocalizedAdditionalElements">
            <summary>
            Specifies additional structured localized metadata for the extension from language pack manifest.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.ShortcutPath">
            <summary>
            Specifies the location of a shortcut to be added when an extension is installed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.RemoveOldPerUserExtension">
            <summary>
            Specifies whether or not this extension can force an uninstall of an already installed per-user extension with a matching vsix id and a lower version
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.AllowClientRole">
            <summary>
            Denotes whether the extension is client enabled or not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.ExtensionType">
            <summary>
            Denotes the type of extension
            VSSDK - old style extension.
            VisualStudioExtensibility - gladstone
            VisualStudioExtensibilityVSSDK - hybrid
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionHeader.TargetFrameworks">
            <summary>
            The list of .NET framework targets the extension is supported for.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.IExtensionInstallerAction">
            <summary>
            Represents the 'Action' metadata of a VSIX manifest.
            </summary>    
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionInstallerAction.ActionTypeName">
            <summary>
            The type of the action.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionInstallerAction.AdditionalElements">
            <summary>
            Specifies additional structured metadata for the asset.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionInstallerAction.Attributes">
            <summary>
            The attributes of the action.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionInstallerAction.RelativePath">
            <summary>
            A path to the action that is relative to the root of the extension.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.IExtensionInstallerInformation">
            <summary>
            Represents all of the metadata contained in a Package manifest's 'Installer' and Prerequisites node.
            </summary>    
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionInstallerInformation.Actions">
            <summary>
            The Actions to perform during installation operations.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionInstallerInformation.References">
            <summary>
            A collection of the extension's prerequisites.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionInstallerInformation.Chip">
            <summary>
            The package's chip architecture.
            </summary>
            <remarks>
            The expectation is that values are "x86", "x64", or "neutral". However, these expectations are not enforced.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.IExtensionReference">
            <summary>
            Represents the 'Reference' metadata of a VSIX manifest.
            </summary>    
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionReference.Name">
            <summary>
            The name of the referenced extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionReference.MoreInfoUrl">
            <summary>
            An Uri to a location that provides more information about the referenced extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionReference.CanAutoDownload">
            <summary>
            Indicates that the dependency should be installed with the extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionReference.NestedExtensionPath">
            <summary>
            A path to a VSIX package that is relative to the parent extension's root directory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionReference.IsRequired">
            <summary>
            Denotes whether the dependency is required for this package.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.IExtensionRequirement">
            <summary>
            Represents the 'InstallationTarget' information of a Package manifest.
            </summary>    
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionRequirement.Identifier">
            <summary>
            The Identifier of the referenced extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionRequirement.VersionRange">
            <summary>
            Specifies the valid version range for this dependency.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionRequirement.ProductArchitecture">
            <summary>
            Specifies the target platform type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionRequirement.Attributes">
            <summary>
            Specifies additional metadata on a dependency.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.IExtensionSdk">
            <summary>
            Represents the 'InstallationTarget' information of an Extension SDK
            Package manifest.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionSdk.TargetPlatformIdentifier">
            <summary>
            Identifies the platform that this Extension SDK is extending.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionSdk.TargetPlatformVersion">
            <summary>
            Identifies the version of the target platform this extension applies to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionSdk.SdkName">
            <summary>
            Specifies the name of the Extension SDK.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionSdk.SdkVersion">
            <summary>
            Specifies the version of the Extension SDK.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.IInstallableExtension">
            <summary>
            Contains a path to VSIX package that may be used for installing an extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IInstallableExtension.PackagePath">
            <summary>
            A path to a VSIX package file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IInstallableExtension.Signature">
            <summary>
            Denotes the presence and validity of the extension's digital signature.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IInstallableExtension.SignedBy">
            <summary>
            The entity that signed the extension. This value is null if the extension is not signed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IInstallableExtension.SignatureCertificate">
            <summary>
            The X509 certificate used to sign the extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IInstallableExtension.InvalidCertificateInformation">
            <summary>
            If SignatureState is InvalidCertificate, this will contain information from the wincrypt
            API about what was invalid about the certificate.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IInstallableExtension.HasEmbeddedExtensions">
            <summary>
            Gets a value that determines whether this extension has any embedded extensions included.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.IInstalledExtension">
            <summary>
            Extends <see cref="T:Microsoft.VisualStudio.ExtensionManager.IExtension" /> by adding metadata describing where
            and how that extension was installed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IInstalledExtension.InstallPath">
            <summary>
            The root Install directory of the extension.
            </summary>
            <remarks>This is called via reflection by the VSSDK build tasks</remarks>        
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IInstalledExtension.State">
            <summary>
            The current state of the installed extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IInstalledExtension.InstalledOn">
            <summary>
            The time when the extension was installed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IInstalledExtension.SizeInBytes">
            <summary>
            The size of the extension InstallPath directory.
            This property is deprecated and will be removed in a future release.
            Use <see cref="M:Microsoft.VisualStudio.ExtensionManager.IInstalledExtension.CalculateSizeInBytesAsync" /> instead.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IInstalledExtension.InstalledPerMachine">
            <summary>
            Denotes whether the extension is installed on a per-machine basis.
            </summary>
            <remarks>This is called via Reflection from the VSSDK build tasks</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IInstalledExtension.IsPackComponent">
            <summary>
            Denotes whether the extension is installed as a pack component.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IInstalledExtension.GetContentLocation(Microsoft.VisualStudio.ExtensionManager.IExtensionContent)">
            <summary>
            Gets the disk location of the specified extension content.
            </summary>
            <param name="content">Must be a content of this extension.</param>
            <returns>The path to where the content was installed if present.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IInstalledExtension.PackageGuids">
            <summary>
            Gets the set of loaded package identifier guids
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IInstalledExtension.IncompatibleReason">
            <summary>
            The reason why the extension is incompatible with the current environment.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IInstalledExtension.CalculateSizeInBytesAsync">
            <summary>
            calculates the size of the extension on disk.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.INotifyUpdateInstallCompleted">
            <summary>
            This interface contains auto-update state for an <see cref="T:Microsoft.VisualStudio.ExtensionManager.IInstalledExtension" /> and provides a way to raise the UpdateInstallCompletedAsync event for an installed extension.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ExtensionManager.INotifyUpdateInstallCompleted.UpdateInstallCompletedAsync">
            <summary>
            Event fired when an installation of an update to this extension is completed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.INotifyUpdateInstallCompleted.InvokeUpdateInstallCompletedAsync(Microsoft.VisualStudio.ExtensionManager.InstallCompletedEventArgs)">
            <summary>
            Invokes install completed event for this extension.
            </summary>
            <param name="e">Install completed event args containing last installed extension.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.InstallationPartialManifestType">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.InstallerExtensionTelemetryInfo">
            <summary>
            This class is used to log the extensions that a user has installed and is used as a ComplexTelemetryProperty so we can send one event for all extensions installed during the vsix installer session
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.InstallProgressData.IsFullMessage">
            <summary>
            Determine if the status text requires further markup.
            For example, full message is "Install Package X" instead of just "Package X"
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.MissingReferenceInformation">
            <summary>
            Relevant information about a missing reference. 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.ProductArchitecture">
            <summary>
            Describes the target platform type of a Vsix manifest installation target.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ProductArchitecture.notSpecified">
            <summary>
            Sentinel value representing undetermined / invalid type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ProductArchitecture.x86">
            <summary> 
            Supports only 32-bit
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ProductArchitecture.amd64">
            <summary>
            Supports only 64-bit
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.ProductArchitecture.arm64">
            <summary>
            Supports only arm64
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.ProxyCredentialsRequiredException">
            <summary>
            Exception thrown from the IVsExtensionRepository methods
            when a web service call requires proxy authenticaion. The 
            caller of the method is responsible for catching this exception
            and calling IVsWebProxy::PrepareWebProxy passing in the Url property
            of this exception to PrepareWebProxy.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.RestartReason">
            <summary>
            List of possible reasons for which the Extension Manager may require a restart.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.UnsupportedProductException">
            <summary>
            Exception thrown when attempting to install an extension that is not
            supported on the current product.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.VersionRange">
            <summary>
            Represents a version range with inclusive or exclusive mininimum or maximum bounds
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.VersionRange.#ctor(System.Version,System.Boolean,System.Version,System.Boolean)">
            <summary>
            Creates a version range
            </summary>
            <param name="min">minimum version</param>
            <param name="isMinInclusive">true, if minimum is inclusive bound, false if exclusive</param>
            <param name="max">maximum version</param>
            <param name="isMaxInclusive">true, if maximum is inclusive bound, false if exclusive</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.VersionRange.#ctor(System.Version)">
            <summary>
            Creates a version range containing only a single version
            </summary>
            <param name="value">the version</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.VersionRange.#ctor">
            <summary>
            Creates a version range containing all versions
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.VersionRange.Contains(System.Version)">
            <summary>
            Determines if the given version is contained in this version range
            </summary>
            <param name="value">the version to check for inclusion</param>
            <returns>true, if this version range contains the version, false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.VersionRange.Parse(System.String)">
            <summary>
            Parses the string into a VersionRange object.
            Null or whitespace strings return a VersionRange object created with the default constructor.
            A single version value returns a VersionRange containing only that version.
            '[' or ']' represent inclusion operator for min and max, respectively
            '(' or ')' represent exclusion operator for min and max, respectively
            Range is of form '{MIN_INCLUSION_EXCLUSION_OPERATOR}{MIN_VERSION},{MAX_VERSION}{MAX_INCLUSION_EXCLUSION_OPERATOR}'
            if MAX_VERSION is null, range is '{MIN_VERSION}'
            if MIN_VERSION == MAX_VERSION, range is '[{MIN_VERSION}]'
            </summary>
            <param name="version">string representing version range</param>
            <returns></returns>
            <exception cref="T:System.FormatException">string does not represent valid version range</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.VersionRange.TryParse(System.String,Microsoft.VisualStudio.ExtensionManager.VersionRange@)">
            <summary>
            Tries to parse the string into a VersionRange object.
            Null or whitespace strings return a VersionRange object created with the default constructor.
            A single version value returns a VersionRange containing only that version.
            '[' or ']' represent inclusion operator for min and max, respectively
            '(' or ')' represent exclusion operator for min and max, respectively
            Range is of form '{MIN_INCLUSION_EXCLUSION_OPERATOR}{MIN_VERSION},{MAX_VERSION}{MAX_INCLUSION_EXCLUSION_OPERATOR}'
            if MAX_VERSION is null, range is '{MIN_VERSION}'
            if MIN_VERSION == MAX_VERSION, range is '[{MIN_VERSION}]'
            </summary>
            <param name="version">string representing version range</param>
            <param name="versionRange">VersionRange object that the string was parsed to, Null if <paramref name="version" /> was not parsed successfully</param>
            <returns>True if the version was parsed successfully, false otherwise</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.VSEdition">
            <summary>
            List of valid editions of Visual Studio that may be targeted by an extension.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.VsixType">
            <summary>
            Describes the type of Vsix package
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.VsixType.Invalid">
            <summary>
            Sentinel value representing undetermined / invalid type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.VsixType.VsixV1">
            <summary>
            Package with extension.vsixmanifest root element &lt;Vsix&gt;
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.VsixType.VsixV2">
            <summary>
            Package with extension.vsixmanifest root element &lt;PackageManifest&gt;
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.VsixType.VsixV3">
            <summary>
            Package with extension.vsixmanifest root element &lt;PackageManifest&gt; and contains manifest.json
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.ExtensionManager.VsixType.Fopx">
            <summary>
            Package with manifest.json and no extension.vsixmanifest
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.DisposeAction">
            <summary>
            Generic class for object that performs some action when disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.DisposeAction.#ctor(System.IDisposable[])">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.ExtensionManager.DisposeAction" /> that disposes of the given <see cref="T:System.IDisposable" />
            objects when disposed
            </summary>
            <param name="disposables">the objects to dispose when this object is disposed</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.DisposeAction.#ctor(System.Action[])">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.ExtensionManager.DisposeAction" /> that executes of the given <see cref="T:System.Action" />
            functions when disposed
            </summary>
            <param name="disposables">the functions to execute when this object is disposed</param>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.DisposeAction.#ctor">
            <summary>
            Creates a new DisposeAction with no associated <see cref="T:System.IDisposable" /> objects or <see cref="T:System.Action" /> objects. This is a NOP <see cref="T:Microsoft.VisualStudio.ExtensionManager.DisposeAction" />
            if <see cref="M:Microsoft.VisualStudio.ExtensionManager.DisposeAction.SetDisposeAction(System.Action)" /> is not called before disposal.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.DisposeAction.SetDisposeAction(System.Action)">
            <summary>
            Associates a <see cref="T:System.Action" /> to be executed when this object is disposed.
            </summary>
            <param name="action">The function to add to the functions executed when this object is disposed</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.ExtensionLocations">
            <summary>
            Enumerates locations where extensions can be found.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.PartialProgress">
            <summary>
            A class for reporting progress with a subset of the parent progress reporter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.PartialProgress.#ctor(System.IProgress{Microsoft.VisualStudio.ExtensionManager.InstallProgressData},System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="progress">The parent progress report into which partial progress will be reported.</param>
            <param name="baseline">The beginning spot in the parent progress for which this progress will start.</param>
            <param name="interval">The length of the progress in the parent progress for which this progress will report.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.ReadOnlyDictionary`2">
            <summary>
            An internal implementation of a ReadOnlyDictionary to prevent callers from 
            accidentally modifying an API object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ScanResult.PerformedExtensionScan">
            <summary>
            Flag that is set when the scan module performs a per-machine and per-user extension scan.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.Settings.ScanResult.PerformedSDKScan">
            <summary>
            Flag that is set when the scan module performs an SDK extensions scan.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorAlreadyInstalled">
            <summary>
              Looks up a localized string similar to {0} is already installed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorBadAllUserExtension">
            <summary>
              Looks up a localized string similar to The extension is invalid because it contains nested extensions with different administrative rights requirements..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorBlockedOnProcesses">
            <summary>
              Looks up a localized string similar to VSIXAutoUpdateError001: VSIXAutoUpdate failed due to the blocking processes..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorBreaksExistingExtensions">
            <summary>
              Looks up a localized string similar to This extension cannot be installed because the following extensions contain dependencies that would be broken as a result of this installation:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorCannotDisablePackComponent">
             <summary>
               Looks up a localized string similar to An error occurred when disabling nested extension '{0}'.
            {1}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorCannotEnableDependency">
             <summary>
               Looks up a localized string similar to This extension cannot be enabled because an error occurred when enabling referenced extension '{0}'.
            {1}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorCertCheckFailed">
            <summary>
              Looks up a localized string similar to CertError001: Certificate check failed. The certificate information of the upgrade does not match with the certificate information of the  extension that is already installed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorCertFileNotFound">
            <summary>
              Looks up a localized string similar to CertError002: Certificate check failed.The certificate information file of the previously installed extension could not be found..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorCertificateFieldsNotFound">
            <summary>
              Looks up a localized string similar to CertError003: Certificate check failed. The certificate information of the previously installed extension could not be read..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorCertificateFieldsNotFoundInUpdate">
            <summary>
              Looks up a localized string similar to CertError005: Certificate check failed. The certificate information of the update could not be read..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorCertPackagePathNotFound">
            <summary>
              Looks up a localized string similar to CertError006: Certificate check failed. The package path of the extension update could not be found..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorDirectoryInUse">
            <summary>
              Looks up a localized string similar to The directory where the extension is installed appears to be in use. Please close any program that may be using it..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorDisallowedPackageTypesInCatalog">
            <summary>
              Looks up a localized string similar to The VSIX's catalog file may only contain packages of type 'vsix' or 'component'..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorExtensionAndPlatformSigned">
            <summary>
              Looks up a localized string similar to Extension SDK and Platform SDK does not contain signed information..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorFilesInUse">
            <summary>
              Looks up a localized string similar to There are files locked in the extension you are trying to update / uninstall. Please close any {0}solutions that may be referencing it..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorFilesInUseAdditional">
             <summary>
               Looks up a localized string similar to 
            The following programs also appear to be locking files that need updating. Please shut them down to enable the update / uninstall.
            
            {0}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInconsistentManifestValues">
            <summary>
              Looks up a localized string similar to The value of property '{0}' is not consistent amongst all manifests..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInstallByMSI">
            <summary>
              Looks up a localized string similar to The InstalledByMSI element in extension {0} cannot be 'true' when installing an extension through the Extensions and Updates Installer.  The element can only be 'true' when an MSI lays down the extension manifest file..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInstallExtensionSDKDirectoryExists">
            <summary>
              Looks up a localized string similar to The path where the Extension SDK is to be installed already exists, please verify. Path: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInstallRequiresElevation">
            <summary>
              Looks up a localized string similar to The extension '{0}' requires administrative privileges in order to be installed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInvalidAttributeValue">
            <summary>
              Looks up a localized string similar to Element '{0}' has invalid value for attribute '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInvalidAttributeValueLength">
            <summary>
              Looks up a localized string similar to Element '{0}' has attribute '{1}' with value '{2}' whose length is greater than maximum value of {3}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInvalidCount">
            <summary>
              Looks up a localized string similar to Element '{0}' has invalid number for child element '{1}'. Expected value between {2} and {3}. Actual is {4}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInvalidElementValue">
            <summary>
              Looks up a localized string similar to Element '{0}' has invalid value for child element '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInvalidElementValueLength">
            <summary>
              Looks up a localized string similar to Element '{0}' has child element '{1}' with value '{2}' whose length is greater than maximum value of {3}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInvalidInstallationTargetPlatformArchitecture">
            <summary>
              Looks up a localized string similar to Target platform architecture for {0} version {1} is not valid. Actual is {2}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInvalidJsonManifest">
            <summary>
              Looks up a localized string similar to The VSIX's {0} file could not be loaded..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInvalidLanguagePackManifestRootElement">
            <summary>
              Looks up a localized string similar to Expected root element of '{{http://schemas.microsoft.com/developer/vsx-schema/2011}}PackageLanguagePackManifest' or '{{http://schemas.microsoft.com/developer/vsx-schema-lp/2010}}VsixLanguagePack' for VSIX language pack manifest. Actual is '{0}'.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInvalidManifest">
            <summary>
              Looks up a localized string similar to This VSIX does not apply to any product installed on this machine. The problem could be that the VSIX manifest's format is not recognized, or that the manifest has been corrupted..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInvalidManifestFileExtension">
            <summary>
              Looks up a localized string similar to The extension manifest file must be named '{0}'..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInvalidManifestRootElement">
            <summary>
              Looks up a localized string similar to Expected root element of '{{http://schemas.microsoft.com/developer/vsx-schema/2011}}PackageManifest' or '{{http://schemas.microsoft.com/developer/vsx-schema/2010}}Vsix' for VSIX manifest. Actual is '{0}'.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInvalidMinimumCount">
            <summary>
              Looks up a localized string similar to Element '{0}' has invalid number for child element '{1}'. Expected value greater than {2}. Actual is {3}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInvalidPath">
            <summary>
              Looks up a localized string similar to The path '{0}' is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInvalidPath_Args2">
            <summary>
              Looks up a localized string similar to The path '{0}' defined in the {1} file is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInvalidVSIX">
            <summary>
              Looks up a localized string similar to The file is not a valid VSIX package..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorInvalidVsixIdInCatalog_Args1">
            <summary>
              Looks up a localized string similar to The package '{0}', defined in the catalog file must have a valid VsixId defined..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorLowerPackage_Args1">
            <summary>
              Looks up a localized string similar to Installation of {0} failed. The extension has a lower version than required by Visual Studio.  Please install the extension from Visual Studio Installer instead..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorMissingComponent">
            <summary>
              Looks up a localized string similar to Installation of {0} failed. To install this extension please install at least one of the following components: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorMissingEula">
            <summary>
              Looks up a localized string similar to The package does not contain the software license agreement that is specified in the extension manifest ({0})..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorMissingInstallationTargetPlatformArchitecture">
            <summary>
              Looks up a localized string similar to Target platform architecture for {0} version {1} is missing and is required..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorMissingLocalizedResources_Args2">
            <summary>
              Looks up a localized string similar to Vsix Catalog Invalid: {0} '{1}' must have 'localizedResources' element defined for en-US.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorMissingManifest">
            <summary>
              Looks up a localized string similar to This VSIX package is invalid because it does not contain the file {0} at the root. The VSIX file may be corrupted..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorMissingNameOrAuthor">
            <summary>
              Looks up a localized string similar to The extension must contain a Name and Author..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorMissingPackage_Args1">
            <summary>
              Looks up a localized string similar to A value for '{0}' needs to be specified in the catalog..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorMissingPackage1_Args1">
            <summary>
              Looks up a localized string similar to Unable to find component in product catalog with this ID: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorMissingReferences">
            <summary>
              Looks up a localized string similar to This extension cannot be installed because the following references are missing:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorMissingRequiredAttribute">
            <summary>
              Looks up a localized string similar to Element '{0}' is missing required attribute '{1}' or attribute value is whitespace..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorMissingRequiredElement">
            <summary>
              Looks up a localized string similar to Element '{0}' is missing required child element '{1}' or child element value is whitespace..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorMissingTargetFramework">
            <summary>
              Looks up a localized string similar to The extension '{0}' requires a version of the .NET Framework that is not installed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorNestedExtensionFailed">
            <summary>
              Looks up a localized string similar to The extension '{0}' nested within '{1}' failed to install..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorNestedExtensionInitialization">
            <summary>
              Looks up a localized string similar to The nested extension with Identifier '{0}' could not be initialized..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorNestedExtensionReferenceIdMismatch">
            <summary>
              Looks up a localized string similar to The extension reference ('{0}') does not match the ID of the nested extension ('{1}') at '{2}'..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorNestedVsixBrokenInternalDependency">
            <summary>
              Looks up a localized string similar to The version of this extension does not fall in the version range specified in one or more of its nested extensions. Please make sure that all version requirements are met..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorNoPerUserOutOfConeFiles">
            <summary>
              Looks up a localized string similar to Unable to install files outside of extension directory when installing per-user..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorNotValidSignedAllUserExtension">
            <summary>
              Looks up a localized string similar to CertError004: Certificate check failed as extension is not a valid signed all user extension..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorNotValidSignedPerUserExtension">
            <summary>
              Looks up a localized string similar to CertError007: Certificate check failed as extension is not a valid signed per user extension..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorOutOfDiskSpaceExceptionBody">
            <summary>
              Looks up a localized string similar to An error has occurred due to low disk space. Visual Studio performance may be impacted. To resolve, please free up space..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorOutOfDiskSpaceExceptionTitle">
            <summary>
              Looks up a localized string similar to Low Disk Space.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorPerUserExperimentPartialManifestType">
            <summary>
              Looks up a localized string similar to Extension '{0}' must be installed for all users..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorReferenceConstraint">
            <summary>
              Looks up a localized string similar to The extension with identifier '{0}' could not be installed because one of its references' constraints (Identifier: '{1}', MinVersion: {2}, MaxVersion: {3}) could not be satisfied since the reference is currently installed with version {4}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorUninstallDependencyException">
             <summary>
               Looks up a localized string similar to This extension cannot be uninstalled because an error was thrown when uninstalling the nested extension '{0}'.
            {1}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorUninstallDependentComponent">
            <summary>
              Looks up a localized string similar to Uninstall of {0} failed. To uninstall this extension please uninstall all of the following components: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorUninstallMSIExtension">
            <summary>
              Looks up a localized string similar to You need to use the Programs and Features pane in the Windows Control Panel to remove {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorUninstallOrphanedComponentRequiresElevation">
            <summary>
              Looks up a localized string similar to Could not uninstall orphaned component '{0}'. Administrator rights are required to uninstall the orphaned component. Please retry uninstalling the extension '{1}' with administrator rights..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorUninstallRequiresElevation">
            <summary>
              Looks up a localized string similar to The extension '{0}' requires administrative privileges in order to be uninstalled..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorUnknownProtocol">
            <summary>
              Looks up a localized string similar to Could not determine the protocol used for this gallery. The URL must point to an Atom Feed configured for hosting Visual Studio Extensions..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorUnlistedPart">
            <summary>
              Looks up a localized string similar to There are files included in this VSIX that are not listed in the manifest.json file..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorUnsignedCatalog">
            <summary>
              Looks up a localized string similar to The extension's catalog is not signed, which is required when PartialManifestType is 'Experiment'.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorUnsupportedProduct">
            <summary>
              Looks up a localized string similar to This extension is not supported on the current product..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorUpgradeInProgress">
            <summary>
              Looks up a localized string similar to Visual Studio is in the process of performing an upgrade. Unable to install extension during upgrade..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ErrorVsixVersionOutOfRange">
            <summary>
              Looks up a localized string similar to This version of the extension falls outside of the supported range and cannot be installed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ExceptionMessageNoAvailableRuntimes">
            <summary>
              Looks up a localized string similar to No available runtimes installed for VS instance \'{0}\'..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.InstalledByMultipleText">
            <summary>
              Looks up a localized string similar to Multiple Extensions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.InvalidReleaseNotesText">
            <summary>
              Looks up a localized string similar to Release notes are invalid or missing..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.OnlineRatingToolTipFormatString">
            <summary>
              Looks up a localized string similar to {0} stars.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.OnlineVotesMultiple">
            <summary>
              Looks up a localized string similar to Votes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.OnlineVotesSingle">
            <summary>
              Looks up a localized string similar to Vote.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.OnlineVotesStringFormat">
            <summary>
              Looks up a localized string similar to ({0} {1}).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ProductUpdatesNodeText">
            <summary>
              Looks up a localized string similar to Product Updates.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ReleaseNotesDialogTitle">
            <summary>
              Looks up a localized string similar to Release Notes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.SetupInstanceNotLaunchable">
            <summary>
              Looks up a localized string similar to Found setup instance {0} but not in launchable state..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.SetupLogEmitted">
            <summary>
              Looks up a localized string similar to Additional install details are available in the log at '{0}'..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.Sharepoint_ListNotFoundOnServer">
            <summary>
              Looks up a localized string similar to The specified list could not be found on the server..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.StreamNotSeekable">
            <summary>
              Looks up a localized string similar to The given stream must have the ability to seek..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.TaskCreatedSuccessfully">
            <summary>
              Looks up a localized string similar to {0}: {1} has been successfully created..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.TaskDoesNotExist">
            <summary>
              Looks up a localized string similar to {0}: {1} does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.TaskExists">
            <summary>
              Looks up a localized string similar to {0}: {1} already exists..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.TaskNotRegistered">
            <summary>
              Looks up a localized string similar to {0}: {1} has not been successfully registered..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.TaskServiceNotConnected">
            <summary>
              Looks up a localized string similar to {0}: Task Service has not been connected..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ToolsOptions_InvalidName">
            <summary>
              Looks up a localized string similar to Name must be non-empty..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ToolsOptions_InvalidURL">
            <summary>
              Looks up a localized string similar to URL must be well formed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.UnlistedPartLogHeader">
            <summary>
              Looks up a localized string similar to All files installed by the VSIX must be listed in the manifest.json file.  The following files need to be added to manifest.json:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.UnscheduleDowngradeExtension">
            <summary>
              Looks up a localized string similar to Remove {0} from the list of extensions scheduled for revert..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.UnscheduleExtension">
            <summary>
              Looks up a localized string similar to Unschedule {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.UnscheduleInstallExtension">
            <summary>
              Looks up a localized string similar to Remove {0} from the list of extensions scheduled for install..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.UnscheduleUninstallExtension">
            <summary>
              Looks up a localized string similar to Remove {0} from the list of extensions scheduled for uninstall..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.UnscheduleUpdateExtension">
            <summary>
              Looks up a localized string similar to Remove {0} from the list of extensions scheduled for update..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ValidateError_InvalidOperation">
            <summary>
              Looks up a localized string similar to The operation cannot be executed at this time. The object {0} is not null..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.ValidateError_StringEmpty">
            <summary>
              Looks up a localized string similar to The string is empty..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.VisualStudioGalleryNodeText">
            <summary>
              Looks up a localized string similar to Visual Studio Marketplace.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.VisualStudioUpdateDescription">
            <summary>
              Looks up a localized string similar to A cumulative update with new features, updated components, and servicing fixes issued..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.VisualStudioUpdateTitle">
            <summary>
              Looks up a localized string similar to {0} update version {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.VSIXLanguagePackSchema">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Impl.ExtensionEngineContractResources.VSIXManifestSchema">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.SingleThreadedHelper">
            <summary>
            A class to help run two actions on the same thread in the scenario that async work needs to be done in between the two actions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.ExtensionRepositoryConfigList">
            <summary>
            Represents a list of ExtensionRepositoryConfig settings. We need a non-generic class 
            in order to use the XAML serializer for import/export settings.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.IExtensionManagerWebClient">
            <summary>
            Interface to allow alternate implementations of System.Net.WebClient when unit testing
            the download API.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionRepository.Search(System.String)">
            <summary>
            Performs a search operation on a given IExtensionRepository
            with the specified user string.
            </summary>
            <param name="searchTerms">The user search string.</param>
            <returns>An IEnumerable containing the search results.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionRepository.ResetStateForGetUpdates">
            <summary>
            Reset the state (if any) for GetUpdate
            If there is a change in user data (like user credentials have changed), then the old GetUpdate task should 
            be cancelled and new one started with right user data
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionRepository.GetUpdates(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ExtensionManager.IInstalledExtension},System.Boolean)">
            <summary>
            The list of updates from the source node. This method
            should only be called from a background thread
            since it will require making a call over the network.
            </summary>
            <param name="extensionsToCheck">A list of extensions to check for updates.</param>
            <param name="forAutoupdate">If set to true, we receive less data over the network just needed for auto update</param>
            <returns>An IEnumerable containing the available updates from this repository.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionRepository.GetExtensions``1(System.Collections.Generic.List{System.String},System.Int32,System.Boolean)">
            <summary>
            Gets the extension objects for the given list of extension ids
            </summary>
            <typeparam name="T">The type of object that should be returned, must be a subtype of GalleryOnlineExtension</typeparam>
            <param name="extensionIds">list of extension ids that should be searched for and returned</param>
            <param name="lcid">the lcid idenfitier for the retrieved extensions</param>
            <param name="forAutoupdate">whether or not the extensions are being retrieved for the purpose of an autoupdate</param>
            <returns>The list of extensions matching the given extension ids</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionRepository.Download(Microsoft.VisualStudio.ExtensionManager.IRepositoryEntry)">
            <summary>
            Synchronously download an IRepositoryEntry.
            In the case that an error occurs, a System.Net.WebException will be thrown with the details of the error message.
            </summary>
            <param name="extensionDetails">The IRepositoryEntry to download</param>
            <returns>The downloaded IInstallableExtension for the requested IRepositoryEntry</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionRepository.DownloadAsync(Microsoft.VisualStudio.ExtensionManager.IRepositoryEntry)">
            <summary>
            Begins an asynchronous download operation.
            </summary>
            <param name="extensionDetails">The IRepositoryEntry to download</param>
            <returns>A Guid which can be used for cancelling requests</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionRepository.DownloadAsyncCancel(System.Guid)">
            <summary>
            Cancels an asynchronous download operation
            </summary>
            <param name="jobId">The ID of the download operation to cancel (returned from the call to DownloadAsync).</param>
        </member>
        <member name="E:Microsoft.VisualStudio.ExtensionManager.IExtensionRepository.DownloadCompleted">
            <summary>
            This event is fired whenever the download of an extension is completed
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.ExtensionManager.IExtensionRepository.DownloadProgressChanged">
            <summary>
            This event is fired whenever the progress of an extension download changes
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionRepository.LocDisplayName">
            <summary>
            Gets the localized DisplayName of the repository.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionRepository.RepositoryId">
            <summary>
            Gets the Repository Id associated with this IExtensionRepository.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IExtensionRepository.VisibleAsOnline">
            <summary>
            Indicates whether repository should be visible as an Online Repository
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionRepository.GetResolvedRepositoryServiceUri(System.Func{System.Uri,System.Uri})">
            <summary>
            Resolves the repository service uri and returns it. The uri may need to be resolved if the original link was an fwlink.
            </summary>
            <param name="resolver">resolver for converting the fwlink to an actual location, if none is provided a default will be used</param>
            <returns>The resolved service uri</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionRepositoryFactory.CreateRepository(Microsoft.VisualStudio.ExtensionManager.IExtensionRepositoryConfig,System.Func{System.String,System.Func{System.Threading.Tasks.Task},System.Threading.Tasks.Task})">
            <summary>
            Creates an instance of a repository from the given configuration information
            </summary>
            <param name="serverConfig">The server configuration</param>
            <param name="proxyResolver">The delegate function to aquire proxy credentials</param>
            <returns>An IExtensionRepository instance for the given server.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionRepositoryFactory.CreateRepository(Microsoft.VisualStudio.ExtensionManager.IExtensionRepositoryConfig)">
            <summary>
            Creates an instance of a repository from the given configuration information
            </summary>
            <param name="serverConfig">The server configuration</param>
            <returns>An IExtensionRepository instance for the given server.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.IExtensionRepositoryFactory.IsProtocolMatch(System.Net.WebResponse,System.IO.Stream)">
            <summary>
            Method that will be called when an ExtensionRepositoryConfig is of unknown type.
            
            The caller is responsible for making a WebRequest to the Uri in question. The 
            WebResponse received back is the object handed to this method. The caller should 
            only call this method if the response was HTTP 200 (OK).
            
            This method should return true if the WebReponse matches the server protocol
            provided by IExtensionRepository objects created by the factory. False otherwise.
            </summary>
            <param name="response">The WebResponse we received for this Uri.</param>
            <param name="responseStream">The contents of the ReponseStream on the request. Implementors should not dispose this stream.</param>
            <returns>True if the WebResponse matches the protocol supported by this IExtensionRepositoryFactory.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.IGalleryOnlineExtension">
            <summary>
            This interface defines the data model that represents a single entry in the 
            Gallery Extensions provider
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.IOnlineExtension">
            <summary>
            This interface defines the data model that represents a single entry in the 
            Online Extensions provider
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.IOnlineExtensionUpdate">
            <summary>
            This interface defines the data model that represents a single entry in the 
            Updates provider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IRepositoryEntry.DownloadUrl">
            <summary>
            The location to download this entry from. This value will be used by the Download API.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IRepositoryEntry.DownloadUpdateUrl">
            <summary>
            The location to download an update for this entry from. This value will be used by the Download API.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IRepositoryEntry.VsixReferences">
            <summary>
            The VsixReferences metadata value from a repository entry. See VSIXReferencesSerializer
            for format details of this string.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.IVsGalleryOnlineExtension">
            <summary>
            This interface defines the data model that represents a single entry in the 
            Gallery Extensions provider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.IVsGalleryOnlineExtension.Flags">
            <summary>
            Flags for an extension. It can contain Preview, Free/Paid/Trial etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.VSGalleryOnlineExtension.Flags">
            <summary>
            Flags for an extension. It can contain Preview, Free/Paid/Trial etc.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Shared.VSIXTaskScheduler">
            <summary>
            Creates windows task scheduler for updating all user extensions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.ExtensionManager.Shared.VSIXTaskSchedulerResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Shared.VSIXTaskSchedulerResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Shared.VSIXTaskSchedulerResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Shared.VSIXTaskSchedulerResources.TaskCreatedSuccessfully">
            <summary>
              Looks up a localized string similar to {0}: {1} has been successfully created..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Shared.VSIXTaskSchedulerResources.TaskDoesNotExist">
            <summary>
              Looks up a localized string similar to {0}: {1} does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Shared.VSIXTaskSchedulerResources.TaskExists">
            <summary>
              Looks up a localized string similar to {0}: {1} already exists..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Shared.VSIXTaskSchedulerResources.TaskNotRegistered">
            <summary>
              Looks up a localized string similar to {0}: {1} has not been successfully registered..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.ExtensionManager.Shared.VSIXTaskSchedulerResources.TaskServiceNotConnected">
            <summary>
              Looks up a localized string similar to {0}: Task Service has not been connected..
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.ExtensionManager.VSGalleryEntryHelper.UpdatePackedExtensionsIncludingNested(Microsoft.VisualStudio.ExtensionManager.IVsGalleryExtension,System.Func{System.Collections.Generic.List{System.String},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.ExtensionManager.IVsGalleryExtension}})">
            <summary>
            Hydrates <see cref="!:PackedExtension" /> for the given <paramref name="rootEntry" />
            </summary>
            <param name="rootEntry">The root level entry to fill</param>
            <param name="fetchExtensionsByVsixId">A callback function which wraps the functionality to fetch extensions from a set of Vsix IDs</param>
            <returns>the <paramref name="rootEntry" /> with live references to its children</returns>
            <remarks>
            The reason this callback is necessary is that this logic was used in three separate places and drifted just enough to 
            not allow us to merge this logic easily. The callback function is the section that drifted.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Sdk.Deploy.IVsixDeployEngine">
            <summary>
            A MEF service capable of deploying a VSIX to a target Visual Studio instance. This interface is meant exclusively for internal use
            by the VisualStudio.Extensibility project system and is subject to change without notice.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Sdk.Deploy.IVsixDeployEngine.DeployVsixAsync(Microsoft.VisualStudio.Setup.IVisualStudioInstance,System.String,System.String,System.IO.TextWriter)">
            <summary>
            Deployes a VSIX to a target Visual Studio instance.
            </summary>
            <param name="targetInstance">The target visual studio instance retrieved from <see cref="T:Microsoft.VisualStudio.Setup.IVisualStudioInstanceService" />.</param>
            <param name="rootSuffix">Which hive to deploy the VSIX to.</param>
            <param name="pathToVsix">Path to the VSIX file.</param>
            <param name="outputPaneWriter">A textWriter that will receive diagnostic messages.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Setup.IVisualStudioInstance">
            <summary>
            Information about a Visual Studio product instance. This interface is meant exclusively for internal use
            by the VisualStudio.Extensibility project system and is subject to change without notice.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Setup.IVisualStudioInstance.DisplayName">
            <summary>
            The display name to show to the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Setup.IVisualStudioInstance.InstallationPath">
            <summary>
            The path to the installation root of the product.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Setup.IVisualStudioInstance.InstanceId">
            <summary>
            The instance identifier.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Setup.IVisualStudioInstance.ProductArchitecture">
            <summary>
            The architecture of the product application.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Setup.IVisualStudioInstance.ProductId">
            <summary>
            The identifier of the product.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Setup.IVisualStudioInstance.ProductPath">
            <summary>
            The relative path to the product application.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Setup.IVisualStudioInstance.InstallationVersion">
            <summary>
            The version of the product installed in this instance.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Setup.IVisualStudioInstanceService">
            <summary>
            MEF export for working with installed visual studio instances. This interface is meant exclusively for internal use
            by the VisualStudio.Extensibility project system and is subject to change without notice.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Setup.IVisualStudioInstanceService.CurrentInstance">
            <summary>
            Gets the Visual Studio instance for the currently running Visual Studio
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Setup.IVisualStudioInstanceService.LaunchableInstances">
            <summary>
            Gets all installed and launchable visual studio instances on the current machine.
            </summary>
            <returns>A collection of visual studio instances. Empty if none installed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Setup.IVisualStudioInstanceService.GetInstanceByInstallId(System.String)">
            <summary>
            Gets a visual studio instance by install id.
            </summary>
            <param name="installId">The install id of the instance to get.</param>
            <returns>A visual studio instance, or null if it does not exist.</returns>
        </member>
        <member name="M:VSExtensibility.Setup.Shared.SetupEngineHelpers.GetLaunchableInstances(Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration2)">
            <summary>
            Creates an enumerable of completed product instances.
            </summary>
        </member>
        <member name="M:VSExtensibility.Setup.Shared.SetupEngineHelpers.GetApplicationName(Microsoft.VisualStudio.Setup.Cache.IInstance,System.Globalization.CultureInfo,Microsoft.VisualStudio.Setup.Cache.IInstance)">
            <summary>
            Get the Application Name (using query API)
            </summary>
            <param name="instance">The instance being referenced</param>
            <param name="culture">The culture</param>
            <param name="cachedInstance">Using the cache Instance if it is provided</param>
            <returns></returns>
        </member>
        <member name="M:VSExtensibility.Setup.Shared.SetupEngineHelpers.GetInstanceProductArchitecture(Microsoft.VisualStudio.Setup.Cache.IInstance)">
            <summary>
            Get the productArchitecture from instance product arch string
            </summary>
            <param name="instance">The instance being referenced</param>
            <returns></returns>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>7sFswDfXbSvCxRUzMx/g0gGH9FTh3YcuDmYwwSOt7do=</DigestValue></Reference></SignedInfo><SignatureValue>qm5dLGoMmUD9cfAaV5rhKkQ6209N1NIpOecZd613Vq7WPPQwRsIfgY5zIKLNJCqXMIXtMHizBB/jjtG5m0j9EaBeExzdWIn/4xq53fA3LkI23v9VfhaE/Ldpi1CxsZDHP+PrYubLGgO3FF3KoDFEvHR/JPHuseTPSkbciBxeUWKty3YKJjrNqWXGj0gH+qs0G5mVw/Lgceis53SEKaDUIvq8DB+KAilclG41kxkICwg/xpfGpO/INjEyNrZSeMIO9CxB7zruBqFb/oWN7chMbWT4VNE845cVSpS8isLaqYiibZF544dy17AFBpWRe7FJwOmRP7CwfvpQUihzfRk/jg==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>7XpKjCg5837MnNU9UKR3xba/q5Iq/JXcyzypjF20Q6LlVwLLwX3ehPNrT4+GM2kpbhg0KF9zaTCqKCnlRY4zUat+8sk/4dUEyzAfHaZrGf+9FDPlP7GMb7dT1lsS4zDSF6swfD4xuoux9mBYJOGDoXxknpL581td3SwLX4w9MIsERD7wjZYpUc+16BXXuSjtNXhYlnrXoePKlDqlGgJCM5wuFwd7BXdS1lJrqVxytOUHyUpp3ovamSQWE7fGYQKxg4e50J/mNYzgN6AYglCeJ9QjGlnQ4a4HTLrtNuqFgG3wt6a6pFJ/C1qdvB/tki3rTRuSkGWcL8t2XJ+/j0BpeQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003"></CounterSignature></Object></Signature></doc>
